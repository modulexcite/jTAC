<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../Shared.js" type="text/javascript"></script>
</head>
<body>
   <script type="text/javascript">
      function testInstalled() {

         assertNotNull(jTAC);
         assertNotUndefined(jTAC.define);
      }

      function testTest1() {
         jTAC.define( "test1",
         {
            constructor: function ( data ) {
               this._x = 1;
               this._defineProperty("x");
               if (data)
                  if (data.y !== undefined)
                     this.y = data.y;
            },
            getX : function()
            {
               return this._x;
            },
            setX: function(val)
            {
               this._x = val;
            }
         } );

         var obj = jTAC.createByClassName("test1");
         assertNotNull(obj);
         assertNotUndefined(obj.x);
         assertEquals(1, obj.x);

         obj2 = jTAC.createByClassName( "test1", {x : 2} );
         assertNotNull(obj2);
         assertNotUndefined(obj2.x);
         assertEquals(2, obj2.x);

         obj2.setX(10);
         assertEquals(10, obj2.getX());
        
         obj3 = jTAC.createByClassName( "test1", {x : 3, y: 'abc'} );
         assertNotNull(obj3);
         assertNotUndefined(obj3.x);
         assertEquals(3, obj3.x);
         assertNotUndefined(obj3.y);
         assertEquals('abc', obj3.y);
      }
      function testTest2() {
         jTAC.define( "n1.test2",
         {
            config:
            {
               x: 0,
               y: "",
               z: null
            },
            configrules:
            {
            // valid values are null and boolean
               z: function ( val )                { 
                  if ( val == null ) 
                     return val; 
                  else 
                     return jTAC.checkAsBool( val ); 
               }
            }
         } );

         var obj = jTAC.createByClassName("n1.test2");
         assertNotNull(obj);
         assertFunction(obj.getX);
         assertFunction(obj.setX);
         assertFunction(obj.getY);
         assertFunction(obj.setY);
         assertFunction(obj.getZ);
         assertFunction(obj.setZ);
         assertEquals(0, obj.x);
         assertEquals("", obj.y);
         assertNull(obj.z);
         obj.x = 3;
         assertEquals(3, obj.x);
         assertEquals(3, obj.getX());
         obj.y = "abc";
         assertEquals("abc", obj.y);
         assertEquals("abc", obj.getY());
         obj.z = true;
         assertTrue(obj.z);
         assertTrue(obj.getZ());
         obj.z = null;
         assertNull(obj.z);
         assertNull(obj.getZ());

         // validation has been setup for each config property due to their default values.
         // x  must be a number
         // y must be a string
         var success = true;
         try {
            obj.x = true;  // illegal
            success = false;
         }
         catch ( e ) {
         }
         if (!success)
            fail("Illegal value assigned to x");
         success = true;
         try {
            obj.y = true;  // illegal
            success = false;
         }
         catch ( e ) {
         }
         if (!success)
            fail("Illegal value assigned to y");

         success = true;
         try {
            obj.z = "abc";  // illegal
            success = false;
         }
         catch ( e ) {
         }
         if (!success)
            fail("Illegal value assigned to z");

         obj2 = jTAC.createByClassName( "n1.test2", {x : 2} );
         assertNotNull(obj2);
         assertNotUndefined(obj2.x);
         assertEquals(2, obj2.x);

         obj2.setX(10);
         assertEquals(10, obj2.getX());
        
         obj3 = jTAC.createByClassName( "n1.test2", {x : 3, y: 'abc'} );
         assertNotNull(obj3);
         assertNotUndefined(obj3.x);
         assertEquals(3, obj3.x);
         assertNotUndefined(obj3.y);
         assertEquals('abc', obj3.y);
      }


      function testTest3() {
         jTAC.define("ns1.ns2.test3", {});
      }



      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testInstalled();
         testTest1();
         testTest2();
         testTest3();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }
   
   </script>
</body>
</html>
