<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/jTAC.js" type="text/javascript"></script>
</head>
<body>
   <script type="text/javascript">
      function testInstalled() {

         assertNotNull(jTAC);
         assertNotUndefined(jTAC.define);
      }

      function testTest1() {
         function check1( name ) {
            var obj = jTAC.create(name);
            assertNotNull(obj);
            assertNotUndefined(obj.x);
            assertEquals(1, obj.x);
         }

         function check2( name, propertyVals ) {
            obj2 = jTAC.create( name, propertyVals );
            assertNotNull(obj2);
            assertNotUndefined(obj2.x);
            assertEquals(2, obj2.x);
            obj2.setX(10);
            assertEquals(10, obj2.getX());
         }

         function check3( name, propertyVals, valx, valy ) {
            obj3 = jTAC.create( name, propertyVals );
            assertNotNull(obj3);
            assertNotUndefined(obj3.x);
            assertEquals(valx, obj3.x);
            assertNotUndefined(obj3.y);
            assertEquals(valy, obj3.y);
         }

         jTAC.define( "test1",
         {
            constructor: function ( data ) {
               this._x = 1;
               this._defineProperty("x");
               if (data)
                  if (data.y !== undefined)
                     this.y = data.y;
            },
            getX : function()
            {
               return this._x;
            },
            setX: function(val)
            {
               this._x = val;
            }
         } );

         jTAC.defineAlias("ABC", "test1");
         jTAC.defineAlias( "test1.x=2", "test1", { x: 2 } );
         jTAC.defineAlias( "test1.xy", "test1", {x : 3, y: 'abc'}  );

         check1("test1");
         check1("ABC");

         check2( "test1", {x : 2} );
         check2( "test1.x=2");

         check3( "test1", {x : 3, y: 'abc'}, 3, 'abc');
         check3( "test1.xy", { x: 4 }, 4, 'abc' );

         check2(null, { jtacClass:'test1', x: 2 });  // will create an instance of test1 with x set to 2

         var success = true;
         try
         {
            var obj = jTAC.create(null, { jtacClass:'testUnknown', x: 2 });
            success = false;
         }
         catch (e)
         {
         }
         if (!success)
            fail("Should have thrown an exception.");

         success = true;
         try
         {
            var obj = jTAC.create(null, { x: 2 }); // name is completely missing
            success = false;
         }
         catch (e)
         {
         }
         if (!success)
            fail("Should have thrown an exception.");


         success = true;
         try
         {
            jTAC.defineAlias("ABC", "test1", null, false);  // already defined
            success = false;
         }
         catch (e)
         {
         }
         if (!success)
            fail("Should have thrown an exception.");

         success = true;
         try
         {
            jTAC.defineAlias("newname", "testunknown", null, false);  // testunknown is undefined
            success = false;
         }
         catch (e)
         {
         }
         if (!success)
            fail("Should have thrown an exception.");


         jTAC.defineAlias( "test1.xy", "test1", {x : 3, y: 'def'}, true  );   // replaces existing 

         var obj = jTAC.create("test1.xy");
         assertEquals('def', obj.y);
      }


      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testInstalled();
         testTest1();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }
   
   </script>
</body>
</html>
