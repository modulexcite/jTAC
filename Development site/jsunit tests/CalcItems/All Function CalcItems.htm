<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/BaseElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/FormElement.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseCulture.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseNumber.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseFloat.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Integer.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Float.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Number.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/NaN.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Null.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Element.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/BaseFunction.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Abs.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Avg.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Max.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Min.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Round.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Fix.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/UserFunction.js" type="text/javascript"></script>
</head>
<body>
   <form action="" method="get" id="Form1">
      <input type='text' id="TextBox1" name="TextBox1" />
      <input type='text' id="TextBox2" name="TextBox2" />
   </form>

   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.
      function testRound()
      {
         var vInstance1 = jTAC.create("CalcItems.Round");
         assertNotNull(vInstance1);
      // test all properties at their defaults
         CheckBaseClassProperties(vInstance1);

         assertEquals(3, vInstance1.maxDecimalPlaces);
         assertEquals(2, vInstance1.roundMode);

         assertTrue(vInstance1.canEvaluate());

      // test calculations
      /* REMINDERS
         roundMode Values: 0 = Point5, 1 = Currency, 2 = Truncate, 3 = Ceiling, 4 = NextWhole. 
      */

      // Point5
         RunRound(vInstance1, 0, 3, 10.5, 10.5);
         RunRound(vInstance1, 0, 2, 10.005, 10.01);
         RunRound(vInstance1, 0, 0, 10.5, 11);
         RunRound(vInstance1, 0, 1, 10.44, 10.4);
         RunRound(vInstance1, 0, 0, 10.4, 10);
         RunRound(vInstance1, 0, 3, 10.33333, 10.333);
         RunRound(vInstance1, 0, 3, 10.99999, 11);
         RunRound(vInstance1, 0, 1, 10.99, 11);
         RunRound(vInstance1, 0, 1, 10.01, 10);

      // Currency
         RunRound(vInstance1, 1, 2, 10.5, 10.5);
         RunRound(vInstance1, 1, 2, 11.5, 11.5);
         RunRound(vInstance1, 1, 2, 10.555, 10.56);
         RunRound(vInstance1, 1, 2, 10.545, 10.54);
         RunRound(vInstance1, 1, 0, 10.5, 10);
         RunRound(vInstance1, 1, 2, 10.33333, 10.33);
         RunRound(vInstance1, 1, 2, 10.99999, 11);
         RunRound(vInstance1, 1, 1, 10.99, 11);


      // Truncate
         RunRound(vInstance1, 2, 3, 10.5, 10.5);
         RunRound(vInstance1, 2, 0, 10.5, 10);
         RunRound(vInstance1, 2, 3, 10.33333, 10.333);
         RunRound(vInstance1, 2, 3, 10.99999, 10.999);
         RunRound(vInstance1, 2, 1, 10.99, 10.9);

      // Ceiling
         RunRound(vInstance1, 3, 3, 10.4, 10.4);
         RunRound(vInstance1, 3, 0, 10.4, 11);
         RunRound(vInstance1, 3, 3, 10.33333, 10.334);
         RunRound(vInstance1, 3, 3, 10.99999, 11);
         RunRound(vInstance1, 3, 3, 10.9911, 10.992);
         RunRound(vInstance1, 3, 4, 10.9911, 10.9911);

      // NextWhole
         RunRound(vInstance1, 4, 2, 1020.340, 1020.34);
         RunRound(vInstance1, 4, 2, 1020.341, 1020.35);
         RunRound(vInstance1, 4, 2, 1020.345, 1020.35);
         RunRound(vInstance1, 4, 2, 1020.349, 1020.35);
         RunRound(vInstance1, 4, 2, -1020.340, -1020.34);
         RunRound(vInstance1, 4, 2, -1020.341, -1020.35);
         RunRound(vInstance1, 4, 2, -1020.345, -1020.35);
         RunRound(vInstance1, 4, 2, -1020.349, -1020.35);

      }

      function CheckBaseClassProperties(instance)
      {
         assertTrue(instance.enabled);
         assertEquals("+", instance.operator);
         assertArrayEquals([], instance.parms);
         assertNotNull(instance.valueWhenInvalid);
         assertTrue(instance.valueWhenInvalid instanceof jTAC.CalcItems.NaN);
         assertNotNull(instance.valueWhenNull);
         assertTrue(instance.valueWhenNull instanceof jTAC.CalcItems.Number);
      }

      function RunRound(instance, roundMode, maxDecimalPlaces, valueToConvert, resultValue)
      {
         instance.roundMode = roundMode;
         assertEquals(roundMode, instance.roundMode);
         instance.maxDecimalPlaces = maxDecimalPlaces;
         assertEquals(maxDecimalPlaces, instance.maxDecimalPlaces);
         instance.parms = valueToConvert;

         assertTrue(instance.canEvaluate());
         assertEquals(resultValue, instance.evaluate());
      }

      function testAbs()
      {
         var vInstance1 = jTAC.create("CalcItems.Abs");
         assertNotNull(vInstance1);
      // test all properties at their defaults
         CheckBaseClassProperties(vInstance1);

         assertTrue(vInstance1.canEvaluate());

         vInstance1.parms = [ 10.5 ];
         assertEquals(10.5, vInstance1.evaluate());

         vInstance1.parms = -10.5;
         assertEquals(10.5, vInstance1.evaluate());

      }


      function testMin()
      {
         var vInstance1 = jTAC.create("CalcItems.Min");
         assertNotNull(vInstance1);
      // test all properties at their defaults
         CheckBaseClassProperties(vInstance1);

         assertTrue(vInstance1.canEvaluate());

         vInstance1.parms = [ 10, 11, 12, 9 ];
         assertEquals(9, vInstance1.evaluate());

         vInstance1.parms = -10.5;
         assertEquals(-10.5, vInstance1.evaluate());

         vInstance1.parms = NaN;
         assertNaN(vInstance1.evaluate());
      }


      function testMax()
      {
         var vInstance1 = jTAC.create("CalcItems.Max");
         assertNotNull(vInstance1);
      // test all properties at their defaults
         CheckBaseClassProperties(vInstance1);

         assertTrue(vInstance1.canEvaluate());

         vInstance1.parms = [ 10, 11, 12, 9 ];
         assertEquals(12, vInstance1.evaluate());

         vInstance1.parms = -10.5;
         assertEquals(-10.5, vInstance1.evaluate());

         vInstance1.parms = NaN;
         assertNaN(vInstance1.evaluate());

         // test valueWhenNull. Defaults to Number = 0
         vInstance1.parms = [ 10, null, 12, 9 ];
         assertEquals(12, vInstance1.evaluate());

         vInstance1.valueWhenNull = null;
         assertNull(vInstance1.evaluate());

         vInstance1.valueWhenNull = NaN;
         assertNaN(vInstance1.evaluate());

         vInstance1.valueWhenNull = 0; // restore default

         // test valueWhenInvalid. Defaults to NaN
         vInstance1.parms = [ 10, NaN, 12, 9 ];
         assertNaN(vInstance1.evaluate());

         vInstance1.valueWhenInvalid = null;
         assertNull(vInstance1.evaluate());

         vInstance1.valueWhenInvalid = 0;
         assertEquals(12, vInstance1.evaluate());
      }

      function testAvg()
      {
         var vInstance1 = jTAC.create("CalcItems.Avg");
         assertNotNull(vInstance1);
      // test all properties at their defaults
         CheckBaseClassProperties(vInstance1);

         assertTrue(vInstance1.canEvaluate());

         vInstance1.parms = [ 10, 11, 12, 9 ];
         assertEquals(10.5, vInstance1.evaluate());

         vInstance1.parms = -10.5;
         assertEquals(-10.5, vInstance1.evaluate());

         vInstance1.parms = NaN;
         assertNaN(vInstance1.evaluate());
      }

      function testUserFunction()
      {
         var vInstance1 = jTAC.create("CalcItems.UserFunction");
         assertNotNull(vInstance1);
      // test all properties at their defaults
         CheckBaseClassProperties(vInstance1);

         assertFalse(vInstance1.canEvaluate());
         vInstance1.func = UserFunctionAdd10;

         assertTrue(vInstance1.canEvaluate());

         vInstance1.parms = [ 10 ];
         assertEquals(20, vInstance1.evaluate());

         vInstance1.parms = -10;
         assertEquals(0, vInstance1.evaluate());
         
      // same, but with the function name specified as a string
         var vInstance2 = jTAC.create("CalcItems.UserFunction");
         assertNotNull(vInstance2);
         vInstance2.func = "UserFunctionAdd10";

         vInstance2.parms = [ 10 ];
         assertEquals(20, vInstance2.evaluate());

         vInstance2.parms = -10;
         assertEquals(0, vInstance2.evaluate());

      }

      function testFix()
      {
         runFix("", null, NaN, null);
         runFix("", 1, NaN, 1);
         runFix("100", 1, NaN, 100);
         runFix("abc", null, NaN, NaN, true);   // will get a NaN condition
         runFix("abc", null, 2, 2, true);   // will get a NaN condition
      }

      function runFix(valueInTextBox, valueWhenNull, valueWhenNaN, result, useNaN)
      {
         var textbox1 = document.getElementById("TextBox1");
         textbox1.value = valueInTextBox;
         var vInstance = jTAC.create("CalcItems.Fix");
         vInstance.addParm(jTAC.create("CalcItems.Element", {elementId: 'TextBox1'}));
         vInstance.valueWhenNull = valueWhenNull;
         if (useNaN)
         {
            vInstance.valueWhenInvalid = valueWhenNaN;
         }
         assertTrue(vInstance.canEvaluate());
         

         var r = vInstance.evaluate();
         if (isNaN(result))
            assertNaN(r);
         else if (result == null)
            assertNull(r);
         else
            assertEquals(result, r);
      }

      function UserFunctionAdd10(parms)
      {
         return parms[0] + 10;
      }

      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testRound();
         testAbs();
         testMin();
         testMax();
         testAvg();
         testUserFunction();
         testFix();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>

</body>
</html>
