<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/Parser.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/BaseElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/FormElement.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseCulture.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseNumber.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseFloat.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Integer.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Float.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Null.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/NaN.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Number.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Element.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Group.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/BaseFunction.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Min.js" type="text/javascript"></script>

</head>
<body>
   <form action="" method="get" id="Form1">
      <input type='text' id="TextBox1" name="TextBox1" />
      <input type='text' id="TextBox2" name="TextBox2" />
   </form>

   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.

      function testDefineParse()
      {
         var calcItem = jTAC.create("CalcItems.Min");
         assertNotNull(calcItem);
         assertNotNull(calcItem.parse);   // ensure the method was attached.
      }
      function testPatterns()
      {
         // try patterns to see that some work and some are rejected by the parse() method.
         assertSuccessParse("Min(10)");
         assertSuccessParse("Min('abc')");
         assertSuccessParse("Min(  'abc'  )");
         assertSuccessParse("  Min(-10)");
         assertSuccessParse("Min('abc', 10)");
         assertSuccessParse("Min(10, 12, -30)");
         assertSuccessParse("Min(10 + 20, 'abc' + 'def')");
         assertExceptionParse("Min()");
         assertExceptionParse("Min(abc)");
         assertExceptionParse("Min('abc',)");
         assertExceptionParse("Min(10 + 20, 'abc + def')");
         assertFailedParse("min(10)");

         assertSuccessParse("Math.min(10)");
         assertSuccessParse("Math.min('abc')");
         assertSuccessParse("Math.min(  'abc'  )");
         assertExceptionParse("Math.min(abc)");
         assertExceptionParse("Math.min()");
         assertSuccessParse("  Math.min(10)");
         assertSuccessParse("Math.min(10, 12, -30)");
         assertSuccessParse("Math.min(10 + 20, 'abc' + 'def')");
         assertFailedParse("Math. min(10)");

         assertFailedParse("");
         assertFailedParse("  ");
         assertFailedParse("Round('abc')");
         assertFailedParse("'abc'");

      }
      function testEvaluate()
      {
         Evaluate("Math.min(10, 12, -30)", 0, null, -30);
         Evaluate("Math.min('TextBox1', 'TextBox2', 100)", 20, 40, 20);
      }


      function assertSuccessParse(text)
      {
         var calcItem = jTAC.create("CalcItems.Min");
         var r = calcItem.parse(text, jTAC.parser);
         assertNotNull(r);
         assertNotNull(r.obj);
         assertTrue(r.obj instanceof jTAC.CalcItems.Min);
      }

      function assertFailedParse(text)
      {
         var calcItem = jTAC.create("CalcItems.Min");
         var r = calcItem.parse(text, jTAC.parser);
         assertNull(r);
      }

      function assertExceptionParse(text)
      {
         var success = true;
         try
         {
            var calcItem = jTAC.create("CalcItems.Min");
            var r = calcItem.parse(text, jTAC.parser); // exception expected here
            success = false;
         }
         catch (e)
         {
         }
         if (!success)
            fail("Exception was expected for: " + text);
      }


      function Evaluate(text, textbox1value, textbox2value, result)
      {
         document.getElementById("TextBox1").value = textbox1value.toString();
         if (textbox2value != null)
            document.getElementById("TextBox2").value = textbox2value.toString();
         var calcItem = jTAC.create("CalcItems.Min");
         var r = calcItem.parse(text, jTAC.parser);
         assertNotNull(r);
         assertNotNull(r.obj);
         assertTrue(r.obj instanceof jTAC.CalcItems.Min);
         assertEquals(result, r.obj.evaluate());
      }

      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testDefineParse();
         testPatterns();
         testEvaluate();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>

</body>
</html>
