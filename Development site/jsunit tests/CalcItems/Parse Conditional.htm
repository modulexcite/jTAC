<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/Parser.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/BaseElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/FormElement.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseCulture.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseNumber.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseFloat.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Integer.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Float.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseOneConnection.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/Range.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/NaN.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Null.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Number.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Element.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Group.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Conditional.js" type="text/javascript"></script>

</head>
<body>
   <form action="" method="get" id="Form1">
      <input type='text' id="TextBox1" name="TextBox1" data-jtac-datatype="Integer" />
      <input type='text' id="TextBox2" name="TextBox2" data-jtac-datatype="Integer" />
   </form>

   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.

      function testDefineParse()
      {
         var calcItem = jTAC.create("CalcItems.Conditional");
         assertNotNull(calcItem);
         assertNotNull(calcItem.parse);   // ensure the method was attached.
      }
      function testPatterns()
      {
         // try patterns to see that some work and some are rejected by the parse() method.
         assertSuccessParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10, 20)", 
            jTAC.Conditions.Range, [jTAC.CalcItems.Number], ["+"], [jTAC.CalcItems.Number], ["+"]);
         assertSuccessParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10)", 
            jTAC.Conditions.Range, [jTAC.CalcItems.Number], ["+"], null, null);
         assertSuccessParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10, null)", 
            jTAC.Conditions.Range, [jTAC.CalcItems.Number], ["+"], null, null);
         assertSuccessParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, null, 20)", 
            jTAC.Conditions.Range, null, null, [jTAC.CalcItems.Number], ["+"]);

         assertSuccessParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 'TextBox1' - 10, null)", 
            jTAC.Conditions.Range, [jTAC.CalcItems.Element, jTAC.CalcItems.Number], ["+", "-"], null, null);

         assertSuccessParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10, 20, 'error')", 
            jTAC.Conditions.Range, [jTAC.CalcItems.Number], ["+"], [jTAC.CalcItems.Number], ["+"], "error");
         assertSuccessParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10, 20, 'zero')", 
            jTAC.Conditions.Range, [jTAC.CalcItems.Number], ["+"], [jTAC.CalcItems.Number], ["+"], "zero");
         assertSuccessParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10, 20, 'success')", 
            jTAC.Conditions.Range, [jTAC.CalcItems.Number], ["+"], [jTAC.CalcItems.Number], ["+"], "success");
         assertSuccessParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10, 20, 'failed')", 
            jTAC.Conditions.Range, [jTAC.CalcItems.Number], ["+"], [jTAC.CalcItems.Number], ["+"], "failed");

         assertSuccessParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10, 20, {'cannotEvalMode' : 'failed'})", 
            jTAC.Conditions.Range, [jTAC.CalcItems.Number], ["+"], [jTAC.CalcItems.Number], ["+"], "failed");

         assertSuccessParse("   Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10)", 
            jTAC.Conditions.Range, [jTAC.CalcItems.Number], ["+"], null, null);

         assertFailedParse("Conditional({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10)");


         assertFailedParse("");
         assertFailedParse("  ");
         assertFailedParse('"1"');
         assertFailedParse("(1)");

         assertExceptionParse("Condition()");
         assertExceptionParse("Condition(abc, 10, 20)");
         assertExceptionParse("Condition({ missing: 'jtacClass' }, 10, 20)");
         assertExceptionParse("Condition({ 'bad : content' }, 10, 20)");
         assertExceptionParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'xyz'}, 10, 20)"); // illegal datatype
         assertExceptionParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, abc, def)");
         assertExceptionParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, (10 , 'abc'), null)");
         assertExceptionParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, )");
         assertExceptionParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10, )");
         assertExceptionParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10, 20,)");
         assertExceptionParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}"); // missing )
         assertExceptionParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 20, 30, { bad : data })");
         assertExceptionParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10, 20, 'abc')");
         assertExceptionParse("Condition({'jtacClass': 'Conditions.Range', 'minimum': 1, 'maximum': 10, 'datatype': 'Integer'}, 10, 20, 'errors')");
          
      }

      function testEvaluate()
      {
         Evaluate("Condition({'jtacClass': 'Conditions.Range', 'elementId': 'TextBox1', 'minimum': 1, 'maximum': 10}, 100, 200)", 10, null, 100);
         Evaluate("Condition({'jtacClass': 'Conditions.Range', 'elementId': 'TextBox1', 'minimum': 1, 'maximum': 10}, 100, 200)", 20, null, 200);
      }

      function assertSuccessParse(text, condtype, successtypes, successoperators, failedtypes, failedoperators, cannotEvalMode)
      {
         var calcItem = jTAC.create("CalcItems.Conditional");
         var r = calcItem.parse(text, jTAC.parser);
         assertNotNull(r);
         assertNotNull(r.obj);
         assertTrue(r.obj.condition instanceof condtype);

         if (successtypes == null)
            assertTrue(r.obj.success instanceof jTAC.CalcItems.Null);
         else if (successtypes.length == 1)
         {
            assertTrue(r.obj.success instanceof successtypes[0]);
         }
         else
         {
            assertTrue(r.obj.success instanceof jTAC.CalcItems.Group);
            assertEquals(successtypes.length, r.obj.success.items.length);

            for (var i = 0; i < successtypes.length; i++)
            {
               assertTrue(r.obj.success.items[i] instanceof successtypes[i]);

               assertEquals(successoperators[i], r.obj.success.items[i].operator);
            }
         }
         if (failedtypes == null)
            assertTrue(r.obj.failed instanceof jTAC.CalcItems.Null);
         else if (failedtypes.length == 1)
         {
            assertTrue(r.obj.failed instanceof failedtypes[0]);
         }
         else
         {
            assertTrue(r.obj.failed instanceof jTAC.CalcItems.Group);
            assertEquals(failedtypes.length, r.obj.failed.items.length);

            for (var i = 0; i < failedtypes.length; i++)
            {
               assertTrue(r.obj.failed.items[i] instanceof failedtypes[i]);

               assertEquals(failedoperators[i], r.obj.failed.items[i].operator);
            }
         }

         if (cannotEvalMode)
            assertEquals(cannotEvalMode, r.obj.cannotEvalMode);
      }

      function assertFailedParse(text)
      {
         var calcItem = jTAC.create("CalcItems.Conditional");
         var r = calcItem.parse(text, jTAC.parser);
         assertNull(r);
      }

      function assertExceptionParse(text)
      {
         var success = true;
         try
         {
            var calcItem = jTAC.create("CalcItems.Conditional");
            var r = calcItem.parse(text, jTAC.parser); // exception expected here
            success = false;
         }
         catch (e)
         {
         }
         if (!success)
            fail("Exception was expected for: " + text);
      }


      function Evaluate(text, textbox1value, textbox2value, result)
      {
         document.getElementById("TextBox1").value = textbox1value.toString();
         if (textbox2value != null)
            document.getElementById("TextBox2").value = textbox2value.toString();
         var calcItem = jTAC.create("CalcItems.Conditional");
         var r = calcItem.parse(text, jTAC.parser);
         assertNotNull(r);
         assertNotNull(r.obj);
         assertTrue(r.obj instanceof jTAC.CalcItems.Conditional);
         assertEquals(result, r.obj.evaluate());
      }


      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testDefineParse();
         testPatterns();
         testEvaluate();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>

</body>
</html>
