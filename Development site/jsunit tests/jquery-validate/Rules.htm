<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../Shared.js" type="text/javascript"></script>
   <script src="../../jquery/jquery-1.5.1.js" type="text/javascript"></script>
   <script src="../../jquery-validate/v1.10.0/jquery.validate.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseCulture.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseNumber.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseFloat.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Float.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Integer.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Currency.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseDatesAndTimes.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseDate.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Date.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/BaseElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/FormElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/MockFormElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseOneConnection.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseTwoConnections.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseOperator.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseOneOrMoreConnections.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseCounter.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/CompareToValue.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseRegExp.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/RegExp.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BooleanLogic.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/CharacterCount.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/CompareTwoElements.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/CountSelections.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/DataTypeCheck.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/Difference.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/DuplicateEntry.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/Range.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/Required.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/RequiredIndex.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/SelectedIndex.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/WordCount.js" type="text/javascript"></script>
   <script src="../../jTAC/jquery-validate/Condition%20Extensions.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/Value.js" type="text/javascript"></script>
   <script src="../../jTAC/jquery-validate/ReplaceTokens%20PlugIn.js" type="text/javascript"></script>
   <script src="../../jTAC/jquery-validate/Rules.js" type="text/javascript"></script>
   <link href="../../jTAC%20Appearance/jquery.validate.css" rel="stylesheet" type="text/css" />

</head>
<body>
   <form id="Form1" action="" method="post" >
      <input id="textBox1" type="text" data-msglabel="FIELDNAME" />
      <input id="textBox2" type="text" data-msglabel="SECONDNAME" />
      <input id="textBox3" type="text" data-msglabel="THIRDNAME" />
      <input id="textBox4" type="text" data-msglabel="FOURTHNAME" />


      <select id="Select1" multiple="multiple" data-msglabel="FIELDNAME" >
         <option value="one">1</option>
         <option value="two">2</option>
         <option value="three" selected="selected">3</option>
         <option value="four" selected="selected">4</option>
         <option value="five">5</option>
         <option value="six">6</option>
         <option value="seven">7</option>
         <option value="eight">8</option>
         <option value="nine">9</option>
      </select>
      <input type="submit" value="Submit" />
   </form>

   <script type="text/javascript">
      function testInstalled() {
         assertNotNull(window.$);
         assertNotNull(window.$.validator);
         assertNotNull($.validator.methods);
         assertNotNull(jTAC);
         assertNotNull(jTAC.jqueryValidate);
         assertNotNull(jTAC.Conditions.Base);
         assertFunction(jTAC.jqueryValidate.createCondition);
         assertFunction(jTAC.jqueryValidate.evaluate);

         $("#Form1").validate({messagelabel : 'message-label'});
      }
      function testConfirmRulesExist()
      {
         // review all Conditions to see if their rules were added to $.validator.methods.
         var defs = jTAC._internal.definitions;
         for (var fullClassName in defs) {
            var def = jTAC.getDefinition(fullClassName);
            if (def.inst instanceof jTAC.Conditions.Base) {
               if (!def.inst.$abstract) {
                  var rule = $.validator.methods[def.inst.ruleName()];
                  assertNotUndefined(rule);
                  assertNotNull(rule);
                  var text = rule.toString();
                  assertTrue(text.indexOf("fullClassName") > -1); // looks into the function for this string, unique to jTAC
               }
            }
         }  // for

      }

      function testDataTypeCheck()
      {
         runRuleFunction("Conditions.DataTypeCheck", null, true, 
            "<span class='{ERRORLABEL}'>{LABEL}</span> must be a valid integer.", 
            "1");

         runRuleFunction("Conditions.DataTypeCheck", null, false, 
            "<span class='{ERRORLABEL}'>{LABEL}</span> must be a valid integer.", 
            "abc");

      }

      function testRange()
      {
         runRuleFunction("Conditions.Range", {minimum: 1, maximum: 10}, true, 
            "<span class='{ERRORLABEL}'>{LABEL}</span> must be between 1 and 10.", 
            "2");

         runRuleFunction("Conditions.Range", {minimum: 1, maximum: 10}, false, 
            "<span class='{ERRORLABEL}'>{LABEL}</span> must be between 1 and 10.", 
            "12");

         runRuleFunction("Conditions.Range", {minimum: 1, maximum: 10}, "dependency-mismatch", 
            "<span class='{ERRORLABEL}'>{LABEL}</span> must be between 1 and 10.", 
            "abc");
      }

      function testCompareToValue()
      {
         runRuleFunction("Conditions.CompareToValue", {valueToCompare: 10, operator: "="},  true,
            "<span class='{ERRORLABEL}'>{LABEL}</span> must be = 10.", 
            "10");
         runRuleFunction("Conditions.CompareToValue", {valueToCompare: 10, operator: "="},  false,
            "<span class='{ERRORLABEL}'>{LABEL}</span> must be = 10.", 
            "11");

         runRuleFunction("Conditions.CompareToValue", {valueToCompare: 10, operator: "="},  "dependency-mismatch",
            "<span class='{ERRORLABEL}'>{LABEL}</span> must be = 10.", 
            "abc");


      }

      function testCompareTwoElements()
      {
         runRuleFunction("Conditions.CompareTwoElements", {elementId2: "textBox2"}, true,  
            "<span class='{ERRORLABEL}'>{LABEL}</span> must be = <span class='{ERRORLABEL}'>{LABEL2}</span>.", 
            "20", "20");

         runRuleFunction("Conditions.CompareTwoElements", {elementId2: "textBox2", operator: "<>"}, false,  
            "<span class='{ERRORLABEL}'>{LABEL}</span> must be &lt;&gt; <span class='{ERRORLABEL}'>{LABEL2}</span>.", 
            "20", "20");

         runRuleFunction("Conditions.CompareTwoElements", {elementId2: "textBox2"}, "dependency-mismatch",  
            "<span class='{ERRORLABEL}'>{LABEL}</span> must be = <span class='{ERRORLABEL}'>{LABEL2}</span>.", 
            "abc", "20");
      }

      function testDifference()
      {
         runRuleFunction("Conditions.Difference", {elementId2: "textBox2", differenceValue: 5}, true,
            "Difference between <span class='{ERRORLABEL}'>{LABEL}</span> and <span class='{ERRORLABEL}'>{LABEL2}</span> must be = 5.", 
            "20", "25");

         runRuleFunction("Conditions.Difference", {elementId2: "textBox2", differenceValue: 5}, false,
            "Difference between <span class='{ERRORLABEL}'>{LABEL}</span> and <span class='{ERRORLABEL}'>{LABEL2}</span> must be = 5.", 
            "20", "30");

         runRuleFunction("Conditions.Difference", {elementId2: "textBox2", differenceValue: 5}, "dependency-mismatch",
            "Difference between <span class='{ERRORLABEL}'>{LABEL}</span> and <span class='{ERRORLABEL}'>{LABEL2}</span> must be = 5.", 
            "abc", "30");
      }

      function testRequired()
      {
         runRuleFunction("Conditions.Required", null, true,
            "<span class='{ERRORLABEL}'>{LABEL}</span> requires an entry.", 
            "abc", null);

         runRuleFunction("Conditions.Required", null, false,
            "<span class='{ERRORLABEL}'>{LABEL}</span> requires an entry.", 
            "", null);

         runRuleFunction("Conditions.Required", {mode: "Range", minimum:1, maximum:2, moreConnections: ["textBox2", "textBox3", "textBox4"]}, false, 
            "<span class='{ERRORLABEL}'>{LABEL}</span> requires an entry.", 
            "", "", "", "");

         runRuleFunction("Conditions.Required", {mode: "Range", minimum:1, maximum:2, moreConnections: ["textBox2", "textBox3", "textBox4"]}, true, 
            "<span class='{ERRORLABEL}'>{LABEL}</span> requires an entry.", 
            "abc", "abc", "", "");
      }

      function testRequiredIndex()
      {
      // Select1 element has options 3 and 4 selected
         var conn = jTAC.create("Connections.FormElement", {id: "Select1"});
         runRuleFunction("Conditions.RequiredIndex", {unassignedIndex: -1}, true,
            "<span class='{ERRORLABEL}'>{LABEL}</span> requires a selection.", 
            conn, null);

         runRuleFunction("Conditions.RequiredIndex", {unassignedIndex: 2}, false,
            "<span class='{ERRORLABEL}'>{LABEL}</span> requires a selection.", 
            conn, null);

      }

      function testSelectedIndex()
      {
      // Select1 element has options 3 and 4 selected
         var conn = jTAC.create("Connections.FormElement", {id: "Select1"});
         runRuleFunction("Conditions.SelectedIndex", {index: 2}, true,
            "<span class='{ERRORLABEL}'>{LABEL}</span> has an invalid selection. Choose another.", 
            conn, null);

         runRuleFunction("Conditions.SelectedIndex", {index: 1}, false,
            "<span class='{ERRORLABEL}'>{LABEL}</span> has an invalid selection. Choose another.", 
            conn, null);


      }

      function testCharacterCount()
      {
         runRuleFunction("Conditions.CharacterCount", {minimum: 5, maximum: 10}, true, 
            "<span class='{ERRORLABEL}'>{LABEL}</span> must have between 5 and 10 characters.", 
            "123456", null);

         runRuleFunction("Conditions.CharacterCount", {minimum: 5, maximum: 10}, false, 
            "<span class='{ERRORLABEL}'>{LABEL}</span> must have between 5 and 10 characters.", 
            "123", null);

      }

      function testWordCount()
      {
         runRuleFunction("Conditions.WordCount", {minimum: 5, maximum: 10},  true,
            "<span class='{ERRORLABEL}'>{LABEL}</span> must have between 5 and 10 words.", 
            "a b c d e f", null);

         runRuleFunction("Conditions.WordCount", {minimum: 5, maximum: 10},  false,
            "<span class='{ERRORLABEL}'>{LABEL}</span> must have between 5 and 10 words.", 
            "a b c", null);

      }

      function testCountSelections()
      {
      // Select1 element has options 3 and 4 selected
         var conn = jTAC.create("Connections.FormElement", {id: "Select1"});

         runRuleFunction("Conditions.CountSelections", {minimum: 0, maximum: 3},  true,
            "<span class='{ERRORLABEL}'>{LABEL}</span> must have between 0 and 3 selections.", 
            conn, null);

         runRuleFunction("Conditions.CountSelections", {minimum: 0, maximum: 1},  false,
            "<span class='{ERRORLABEL}'>{LABEL}</span> must have between 0 and 1 selections.", 
            conn, null);

      }

      function testRegExp()
      {
         runRuleFunction("Conditions.RegExp", {expression: "^\\d*$"}, true,
            "<span class='{ERRORLABEL}'>{LABEL}</span> must be a valid format.", 
            "123", null);

         runRuleFunction("Conditions.RegExp", {expression: "^\\d*$"}, false,
            "<span class='{ERRORLABEL}'>{LABEL}</span> must be a valid format.", 
            "abc", null);

     }

      function testDuplicateEntry()
      {
         runRuleFunction("Conditions.DuplicateEntry", {moreConnections:["textBox2", "textBox3"]}, true,
            "<span class='{ERRORLABEL}'>field 1</span> must be different from <span class='{ERRORLABEL}'>field 2</span>.",    // label names are filled with boilerplate text instead of actual control labels when the control is valid.
            "abc", "123", "def", "234");

         runRuleFunction("Conditions.DuplicateEntry", {moreConnections:["textBox2", "textBox3"]}, false,
            "<span class='{ERRORLABEL}'>FIELDNAME</span> must be different from <span class='{ERRORLABEL}'>THIRDNAME</span>.", 
            "abc", "123", "abc", "234");
      }


      function runRuleFunction(fullClassName, propertyValues, result, resultMessage, value1, value2, value3, value4)
      {
         function getConnection(id, value)
         {
            var conn;
            if (value && (value instanceof jTAC.Connections.Base))
               conn = value;
            else {
               conn = jTAC.create("Connections.FormElement", {id: id});
               var el = conn.getElement();
               if (value != null)
                  el.value = value.toString();
            }
            return conn;
         }
         var def = jTAC.getDefinition(fullClassName);
         assertNotNull(def);
         assertNotNull(def.inst);
         assertFunction(def.inst.ruleName);

         var rule = $.validator.methods[def.inst.ruleName()];
         assertNotUndefined(rule);
         assertNotNull(rule);
         var text = rule.toString();
         assertTrue(text.indexOf("fullClassName") > -1); // looks into the function for this string, unique to jTAC

         var conn = getConnection("textBox1", value1);
         var element = conn.getElement();
         if (value2 != null)
            getConnection("textBox2", value2);
         if (value3 != null)
            getConnection("textBox3", value3);
         if (value4 != null)
            getConnection("textBox4", value4);

         if (!propertyValues)
            propertyValues = {}; // requires something

         var r = rule(value1, element, propertyValues);
         assertEquals(result, r);

         var msg = $.validator.messages[def.inst.ruleName()];
         assertNotNull(msg);
         assertFunction(msg);

         var rmsg = msg(propertyValues, element);

         var replaceToken = $.validator.replaceTokens[def.inst.ruleName()];
         assertNotNull(replaceToken);
         assertFunction(replaceToken);

         resultMessage = resultMessage.replace("{LABEL}", "FIELDNAME").replace("{LABEL2}", "SECONDNAME");
         resultMessage = jTAC.replaceAll(resultMessage, "{ERRORLABEL}", "message-label");

         rmsg = replaceToken(rmsg, element, propertyValues, value1);

         assertEquals(resultMessage, rmsg);
      }


      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testInstalled();
         testConfirmRulesExist();
         testDataTypeCheck();
         testRange();
         testCompareToValue();
         testCompareTwoElements();
         testDifference();
         testRequired();
         testRequiredIndex();
         testSelectedIndex();
         testCharacterCount();
         testWordCount();
         testCountSelections();
         testRegExp();
         testDuplicateEntry();

      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }
   
   </script>
</body>
</html>
