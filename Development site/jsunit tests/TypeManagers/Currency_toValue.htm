<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseCulture.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseNumber.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseFloat.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Currency.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.fr-FR.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.de-DE.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.fo.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Culture%20engine%20using%20jquery-globalize.js" type="text/javascript"></script>
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.
      function testToValue()
      {
         var vInstance1 = jTAC.create("TypeManagers.Currency");
         assertNotNull(vInstance1);
         ToValueMain(vInstance1, "$1020.30", 1020.3);
         ToValueMain(vInstance1, "1020.30", 1020.3);
         ToValueMain(vInstance1, "1,020.30", 1020.3);
         ToValueMain(vInstance1, "$ 1020.30", 1020.3);
         ToValueMain(vInstance1, "$1020.3", 1020.3);
         ToValueMain(vInstance1, "$1020.", 1020);
         ToValueMain(vInstance1, "$1020", 1020);
         ToValueMain(vInstance1, "1020", 1020);
         ToValueMain(vInstance1, "1,020", 1020);
         ToValueMain(vInstance1, "$1,000,000.30", 1000000.30);
         ToValueMain(vInstance1, "$1,00,0,0,00.30", 1000000.30);  // extra thousands separators are ignored
         ToValueMain(vInstance1, "-$1020.30", -1020.3);
         ToValueMain(vInstance1, "-1020.30", -1020.3);
         ToValueMain(vInstance1, "-$1,020.30", -1020.3);
         ToValueMain(vInstance1, "-1,020.30", -1020.3);
         ToValueMain(vInstance1, "($1020.30)", -1020.3);
         ToValueMain(vInstance1, "(1020.30)", -1020.3);
         ToValueMain(vInstance1, "($1,020.30)", -1020.3);
         ToValueMain(vInstance1, "(1,020.30)", -1020.3);
      }

      function testToIllegalValue()
      {
         var vInstance1 = jTAC.create("TypeManagers.Currency");
         assertNotNull(vInstance1);
         ToIllegalValueMain(vInstance1, "1,020.301");
         ToIllegalValueMain(vInstance1, "1020a03");
         ToIllegalValueMain(vInstance1, "1,020.3.0");
         vInstance1.setAllowNegatives(false);
         ToIllegalValueMain(vInstance1, "($1,020.30)");
         ToIllegalValueMain(vInstance1, "-$1,020.30");
         ToIllegalValueMain(vInstance1, "-1,020.30");
         vInstance1.setAllowCurrencySymbol(false);
         ToIllegalValueMain(vInstance1, "$1,020.30");
         ToIllegalValueMain(vInstance1, "1,020.30-");  // see if this is allowed by jquery-globalize
         ToIllegalValueMain(vInstance1, "($1020.30");  // missing trailing )

      }

      function testAllowCurrencySymbol()
      {
         var vInstance1 = jTAC.create("TypeManagers.Currency");
         assertNotNull(vInstance1);
         vInstance1.setAllowCurrencySymbol(false);
         ToValueMain(vInstance1, "1020.30", 1020.3);
         ToIllegalValueMain(vInstance1, "$1020.30");
      }

      function testRoundExtra()
      {
         var vInstance1 = jTAC.create("TypeManagers.Currency");
         assertNotNull(vInstance1);
         ToIllegalValueMain(vInstance1, "1020.345");
//      0 = Point5, 1 = Currency, 2 = Truncate, 3 = Ceiling, 4 = NextWhole
//      Anything else throws an exception if the number of decimal digits exceeds mdp.

         vInstance1.setRoundMode(0);
         ToValueMain(vInstance1, "1020.340", 1020.34);
         ToValueMain(vInstance1, "1020.341", 1020.34);
         ToValueMain(vInstance1, "1020.345", 1020.35);
         ToValueMain(vInstance1, "1020.349", 1020.35);
         vInstance1.setRoundMode(1);
         ToValueMain(vInstance1, "1020.340", 1020.34);
         ToValueMain(vInstance1, "1020.341", 1020.34);
         ToValueMain(vInstance1, "1020.345", 1020.34);
         ToValueMain(vInstance1, "1020.349", 1020.35);
         ToValueMain(vInstance1, "1020.350", 1020.35);
         ToValueMain(vInstance1, "1020.351", 1020.35);
         ToValueMain(vInstance1, "1020.355", 1020.36);
         ToValueMain(vInstance1, "1020.359", 1020.36);
         vInstance1.setRoundMode(2); 
         ToValueMain(vInstance1, "1020.340", 1020.34);
         ToValueMain(vInstance1, "1020.341", 1020.34);
         ToValueMain(vInstance1, "1020.345", 1020.34);
         ToValueMain(vInstance1, "1020.349", 1020.34);
         vInstance1.setRoundMode(3);
         ToValueMain(vInstance1, "1020.340", 1020.34);
         ToValueMain(vInstance1, "1020.341", 1020.35);
         ToValueMain(vInstance1, "1020.345", 1020.35);
         ToValueMain(vInstance1, "1020.349", 1020.35);
         ToValueMain(vInstance1, "-1020.340", -1020.34);
         ToValueMain(vInstance1, "-1020.341", -1020.34);
         ToValueMain(vInstance1, "-1020.345", -1020.34);
         ToValueMain(vInstance1, "-1020.349", -1020.34);
         vInstance1.setRoundMode(4);
         ToValueMain(vInstance1, "1020.340", 1020.34);
         ToValueMain(vInstance1, "1020.341", 1020.35);
         ToValueMain(vInstance1, "1020.345", 1020.35);
         ToValueMain(vInstance1, "1020.349", 1020.35);
         ToValueMain(vInstance1, "-1020.340", -1020.34);
         ToValueMain(vInstance1, "-1020.341", -1020.35);
         ToValueMain(vInstance1, "-1020.345", -1020.35);
         ToValueMain(vInstance1, "-1020.349", -1020.35);
      }


      function testUseDecimalDigits()
      {
         var vInstance1 = jTAC.create("TypeManagers.Currency");
         assertNotNull(vInstance1);
         ToIllegalValueMain(vInstance1, "1020.35345");
         vInstance1.setUseDecimalDigits(false);
         ToValueMain(vInstance1, "1020.30", 1020.3);
         ToValueMain(vInstance1, "1020.35", 1020.35);
         ToValueMain(vInstance1, "1020.35345", 1020.35345);
      }

      function testStrictSymbols()
      {
         var vInstance1 = jTAC.create("TypeManagers.Currency");
         assertNotNull(vInstance1);

         vInstance1.strictSymbols = true;
         ToValueMain(vInstance1, "$1000.00", 1000);
         ToValueMain(vInstance1, "1000.00", 1000);
         ToValueMain(vInstance1, "($1000.00)", -1000);
         ToValueMain(vInstance1, "($1000)", -1000);
         ToValueMain(vInstance1, "($1000.)", -1000);
         ToIllegalValueMain(vInstance1, "-1000.00");
         ToIllegalValueMain(vInstance1, "-$1000.00");
         ToIllegalValueMain(vInstance1, "- 1000");
         ToIllegalValueMain(vInstance1, "1000-");

         vInstance1.cultureName = "fr-FR";   // currency symbol is to the right with a space separator
         ToValueMain(vInstance1, "1,0 €", 1);
         ToValueMain(vInstance1, "1,0€", 1); // spaces are optional.
         ToValueMain(vInstance1, "-1,0 €", -1);
         ToIllegalValueMain(vInstance1, "€1,00");
         ToIllegalValueMain(vInstance1, "€ 1,00");
         ToIllegalValueMain(vInstance1, "(1,0 €)");   // fr requires - char
         ToIllegalValueMain(vInstance1, "1,0- €"); // - must be on the left
         ToIllegalValueMain(vInstance1, "1,0 €-");
         ToIllegalValueMain(vInstance1, "- 1,0 €", -1);
      }


      function testToValueFrench()
      {
         var vInstance1 = jTAC.create("TypeManagers.Currency", {cultureName: "fr-FR"});
         assertNotNull(vInstance1);
         var gSet = vInstance1.currencyFormat("GroupSep"); // not really a space %20, but %A0
         var valStr = "1" + gSet + "000" + gSet + "000,00 €";
         ToValueMain(vInstance1, valStr, 1000000);
         var valStr = "1" + gSet + "000,30 €";
         ToValueMain(vInstance1, valStr, 1000.30);
         ToValueMain(vInstance1, "10,12 €", 10.12);
         ToValueMain(vInstance1, "10,12€", 10.12);
         ToValueMain(vInstance1, "€10,12", 10.12);
         ToValueMain(vInstance1, "-10,12 €", -10.12);

         ToIllegalValueMain(vInstance1, "1.000.000"); //  illegal thousands and decimal separators
         ToIllegalValueMain(vInstance1, "01baddata");
         ToIllegalValueMain(vInstance1, "(10,12 €)");
         ToIllegalValueMain(vInstance1, "10.12 €");

         vInstance1.acceptPeriodAsDecSep = true;
         ToValueMain(vInstance1, "10.12 €", 10.12);

      }



      function testToValueGerman()
      {
         var vInstance1 = jTAC.create("TypeManagers.Currency", {cultureName: "de-DE"});
         assertNotNull(vInstance1);
         ToValueMain(vInstance1, "1.000.000,30 €", 1000000.30);
         ToValueMain(vInstance1, "1.000.000,30€", 1000000.30);
         ToValueMain(vInstance1, "-1.000.000,30 €", -1000000.30);
         ToValueMain(vInstance1, "-1000000,30 €", -1000000.30);
         ToValueMain(vInstance1, "€1000000,30", 1000000.30);   // jquery-globalize considers this valid. It just strips any currency symbol to find the number
         ToValueMain(vInstance1, "1000000,30", 1000000.30);
         ToValueMain(vInstance1, "1.00.0.00.0,30 €", 1000000.30); // extra thousands separators are ignored
         ToIllegalValueMain(vInstance1, "(1.000.000,30)");  //  () are not defined for de-DE
         ToIllegalValueMain(vInstance1, "1,000,000.30"); //  illegal thousands separators
         ToIllegalValueMain(vInstance1, "$1.000.000,30"); // illegal currency symbol
         ToIllegalValueMain(vInstance1, "1.000.000,3,0"); //  extra decimal separator
         ToIllegalValueMain(vInstance1, "01baddata");

         vInstance1.setAllowNegatives(false);
         ToIllegalValueMain(vInstance1, "-1020,30");
         ToIllegalValueMain(vInstance1, "-1.020,30 €");
         vInstance1.setAllowCurrencySymbol(false);
         ToIllegalValueMain(vInstance1, "1.020,30 €");

      }

      function testToValueFarsi()
      {
         var vInstance1 = jTAC.create("TypeManagers.Currency", {cultureName: "fo"});
         assertNotNull(vInstance1);
         ToValueMain(vInstance1, "kr. 1.000.000,30", 1000000.30);
         ToValueMain(vInstance1, "kr. -1.000.000,30", -1000000.30);
         ToValueMain(vInstance1, "kr. -1000000,30", -1000000.30);
         ToValueMain(vInstance1, "1000000,30", 1000000.30);
         ToValueMain(vInstance1, "kr. 1.00.0.00.0,30", 1000000.30); // extra thousands separators are ignored
         ToIllegalValueMain(vInstance1, "(1.000.000,30)");  //  () are not defined for de-DE
         ToIllegalValueMain(vInstance1, "1,000,000.30"); //  illegal thousands separators
         ToIllegalValueMain(vInstance1, "$1.000.000,30"); // illegal currency symbol
         ToIllegalValueMain(vInstance1, "1.000.000,30 €"); // illegal currency symbol
         ToIllegalValueMain(vInstance1, "1.000.000,3,0"); //  extra decimal separator
         ToIllegalValueMain(vInstance1, "01baddata");

         vInstance1.setAllowNegatives(false);
         ToValueMain(vInstance1, "kr. 1.000.000,30", 1000000.30);
         ToIllegalValueMain(vInstance1, "kr. -1.000.000,30", -1000000.30);
         ToIllegalValueMain(vInstance1, "-1020,30");
         ToIllegalValueMain(vInstance1, "kr. -1.020,30");
         vInstance1.setAllowCurrencySymbol(false);
         ToIllegalValueMain(vInstance1, "kr. 1.020,30");
      }

      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testToValue();
         testToIllegalValue();
         testAllowCurrencySymbol();
         testRoundExtra();
         testUseDecimalDigits();
         testStrictSymbols();
         testToValueFrench();
         testToValueGerman();
         testToValueFarsi();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>

</head>
<body>

</body>
</html>
