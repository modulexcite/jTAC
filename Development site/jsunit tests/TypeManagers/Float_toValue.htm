<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseCulture.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseNumber.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseFloat.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Float.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.fr-FR.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.de-DE.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Culture%20engine%20using%20jquery-globalize.js" type="text/javascript"></script>
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.
      function testToValue()
      {
         var vInstance1 = jTAC.create("TypeManagers.Float");
         assertNotNull(vInstance1);
         ToValueMain(vInstance1, "1020.30", 1020.3);
         ToValueMain(vInstance1, "-1020.30", -1020.3);
         ToValueMain(vInstance1, "1020.30-", -1020.3);   // position of - does not matter with strictSymbols = false
         ToValueMain(vInstance1, "0001020.30", 1020.3);

         ToIllegalValueMain(vInstance1, "01baddata");
         ToIllegalValueMain(vInstance1, "10-20.30");  // - char mixed in 
         ToIllegalValueMain(vInstance1, "10.20.30"); 
         ToIllegalValueMain(vInstance1, "(1020.30)");

         vInstance1.strictSymbols = true;
         ToValueMain(vInstance1, "1000", 1000);
         ToValueMain(vInstance1, "-1000", -1000);
         ToIllegalValueMain(vInstance1, "- 1000");
         ToIllegalValueMain(vInstance1, "1000-");

      }
      function testToValueAsInt()
      {
         var vInstance1 = jTAC.create("TypeManagers.Float");
         assertNotNull(vInstance1);
         ToValueMain(vInstance1, "1000", 1000);

         vInstance1.setMaxDecimalPlaces(4);  // see if this trips it up
         ToValueMain(vInstance1, "1000", 1000);
      }

      function testToValueTS()
      {
         var vInstance1 = jTAC.create("TypeManagers.Float");
         assertNotNull(vInstance1);
         ToValueMain(vInstance1, "1,000,000.30", 1000000.30);

         vInstance1.allowGroupSep = false;
         ToIllegalValueMain(vInstance1, "1,000,000.30");
      }


      function testToValueGerman()
      {
         var vInstance1 = jTAC.create("TypeManagers.Float", {cultureName: "de-DE"});
         assertNotNull(vInstance1);
         ToValueMain(vInstance1, "1.000.000,30", 1000000.30);
         // now try illegal thousands separators
         ToIllegalValueMain(vInstance1, "1,000,000.30");
         ToIllegalValueMain(vInstance1, "01baddata");
      }


      function testToValueFrench()
      {
         var vInstance1 = jTAC.create("TypeManagers.Float", {cultureName: "fr-FR"});
         assertNotNull(vInstance1);
         var gSet = vInstance1.currencyFormat("GroupSep"); // not really a space %20, but %A0
         var valStr = "1" + gSet + "000" + gSet + "000";

         ToValueMain(vInstance1, valStr, 1000000);
         ToValueMain(vInstance1, "10,12", 10.12);

         ToIllegalValueMain(vInstance1, "1.000.000"); //  illegal thousands and decimal separators
         ToIllegalValueMain(vInstance1, "01baddata");
         vInstance1.acceptPeriodAsDecSep = true;
         ToValueMain(vInstance1, "10.12", 10.12);

      }

      function testToValueMaxDecimalPlaces()
      {
         var vInstance1 = jTAC.create("TypeManagers.Float");
         assertNotNull(vInstance1);
         vInstance1.setMaxDecimalPlaces(3);
         ToValueMain(vInstance1, "1,000,000.30", 1000000.30);
         ToValueMain(vInstance1, "1,000,000.303", 1000000.303);
         ToIllegalValueMain(vInstance1, "1,000,000.3035");

         // rounding tests for 2 decimal place max
//      0 = Point5, 1 = Currency, 2 = Truncate, 3 = Ceiling, 4 = NextWhole
//      Anything else throws an exception if the number of decimal digits exceeds mdp.
         vInstance1.setMaxDecimalPlaces(2);

         vInstance1.setRoundMode(0);   // point5
         ToValueMain(vInstance1, "1020.340", 1020.34);
         ToValueMain(vInstance1, "1020.341", 1020.34);
         ToValueMain(vInstance1, "1020.345", 1020.35);
         ToValueMain(vInstance1, "1020.349", 1020.35);
         vInstance1.setRoundMode(1);   // currency
         ToValueMain(vInstance1, "1020.340", 1020.34);
         ToValueMain(vInstance1, "1020.341", 1020.34);
         ToValueMain(vInstance1, "1020.345", 1020.34);
         ToValueMain(vInstance1, "1020.349", 1020.34);
         ToValueMain(vInstance1, "1020.350", 1020.35);
         ToValueMain(vInstance1, "1020.351", 1020.35);
         ToValueMain(vInstance1, "1020.355", 1020.36);
         ToValueMain(vInstance1, "1020.359", 1020.36);
         vInstance1.setRoundMode(2); // truncate
         ToValueMain(vInstance1, "1020.340", 1020.34);
         ToValueMain(vInstance1, "1020.341", 1020.34);
         ToValueMain(vInstance1, "1020.345", 1020.34);
         ToValueMain(vInstance1, "1020.349", 1020.34);
         vInstance1.setRoundMode(3);   // ceiling
         ToValueMain(vInstance1, "1020.340", 1020.34);
         ToValueMain(vInstance1, "1020.341", 1020.35);
         ToValueMain(vInstance1, "1020.345", 1020.35);
         ToValueMain(vInstance1, "1020.349", 1020.35);
         ToValueMain(vInstance1, "-1020.340", -1020.34);
         ToValueMain(vInstance1, "-1020.341", -1020.34);
         ToValueMain(vInstance1, "-1020.345", -1020.34);
         ToValueMain(vInstance1, "-1020.349", -1020.34);
         vInstance1.setRoundMode(4);   // nextWhole
         ToValueMain(vInstance1, "1020.340", 1020.34);
         ToValueMain(vInstance1, "1020.341", 1020.35);
         ToValueMain(vInstance1, "1020.345", 1020.35);
         ToValueMain(vInstance1, "1020.349", 1020.35);
         ToValueMain(vInstance1, "-1020.340", -1020.34);
         ToValueMain(vInstance1, "-1020.341", -1020.35);
         ToValueMain(vInstance1, "-1020.345", -1020.35);
         ToValueMain(vInstance1, "-1020.349", -1020.35);
      }

      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testToValue();
         testToValueAsInt();
         testToValueTS();
         testToValueMaxDecimalPlaces();
         testToValueFrench();
         testToValueGerman();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>

</head>
<body>

</body>
</html>
