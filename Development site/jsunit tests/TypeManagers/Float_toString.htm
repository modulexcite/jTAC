<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseCulture.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseNumber.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseFloat.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Float.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.fr-FR.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.de-DE.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Culture%20engine%20using%20jquery-globalize.js" type="text/javascript"></script>
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.
      function testToString()
      {
         var vInstance1 = jTAC.create("TypeManagers.Float");
         assertNotNull(vInstance1);
         ToStringMain(vInstance1, 1000.0, "1,000.0");
         ToStringMain(vInstance1, 1.234, "1.234");
         ToStringMain(vInstance1, 0.0, "0.0");
         ToStringMain(vInstance1, -10.102030, "-10.10203");
         // integers conversion
         ToStringMain(vInstance1, 1, "1.0");
         ToStringMain(vInstance1, 0, "0.0");
         ToStringMain(vInstance1, -10, "-10.0");
         ToIllegalStringMain(vInstance1, "1.30baddata");
      }

      function testToStringNoTS()
      {
         var vInstance1 = jTAC.create("TypeManagers.Float");
         assertNotNull(vInstance1);
         vInstance1.setShowGroupSep(false);
         ToStringMain(vInstance1, 1000.0, "1000.0");

         ToStringMain(vInstance1, -1000000.0, "-1000000.0");

      }

      function testToStringNoNegatives()
      {
         var vInstance1 = jTAC.create("TypeManagers.Float");
         assertNotNull(vInstance1);
         vInstance1.setAllowNegatives(false);
         ToStringMain(vInstance1, 1000.0, "1,000.0");
         ToIllegalStringMain(vInstance1, -100000.0);
      }

      function testToStringTrailingDecimals()
      {
         var vInstance1 = jTAC.create("TypeManagers.Float");
         assertNotNull(vInstance1);
         vInstance1.setTrailingZeroDecimalPlaces(2);
         ToStringMain(vInstance1, 1000.0, "1,000.00");
         ToStringMain(vInstance1, 1.234, "1.234");
         ToStringMain(vInstance1, 0.0, "0.00");
         ToStringMain(vInstance1, -10.102030, "-10.10203");
         vInstance1.setMaxDecimalPlaces(3);  // will impact how floats are converted. When not set, it uses "n6". Now it uses "n3" as the format pattern
         ToStringMain(vInstance1, 1000.0, "1,000.00");
         ToStringMain(vInstance1, 1.234, "1.234");
         ToStringMain(vInstance1, 0.0, "0.00");
         ToIllegalStringMain(vInstance1, -10.102030); // while maxDecimalPlaces is used above, RoundMode is still null, causing an exception
         vInstance1.setRoundMode(0);
         ToStringMain(vInstance1, -10.102030, "-10.102"); // while maxDecimalPlaces is used above, it isn't used for validation, so this isn't an error. It just strips extra digits

      }


      function testToStringGerman()
      {
         var vInstance1 = jTAC.create("TypeManagers.Float", {cultureName: "de-DE"});
         assertNotNull(vInstance1);
         ToStringMain(vInstance1, 1000000.0, "1.000.000,0");
         ToStringMain(vInstance1, -1000000.0, "-1.000.000,0");
         ToStringMain(vInstance1, -1000000.02040, "-1.000.000,0204");
      }

      function testToStringFrench()
      {
         var vInstance1 = jTAC.create("TypeManagers.Float", {cultureName: "fr-FR"});
         assertNotNull(vInstance1);
         var gSet = vInstance1.currencyFormat("GroupSep"); // not really a space %20, but %A0
         var valStr = "1" + gSet + "000" + gSet + "000,0";

         ToStringMain(vInstance1, 1000000.0, valStr);
         ToStringMain(vInstance1, -1000000.0, "-" + valStr);

      }
      function testToStringNeutral()
      {
         var vInstance1 = jTAC.create("TypeManagers.Float", {cultureName: "fr-FR"}); // forces different separator characters
         assertNotNull(vInstance1);
         assertEquals("1.0", vInstance1.toStringNeutral(1));
         assertEquals("10000.123", vInstance1.toStringNeutral(10000.123));
         assertEquals("-1.1", vInstance1.toStringNeutral(-1.1));
         assertEquals("", vInstance1.toStringNeutral(null));

      }

      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testToString();
         testToStringNoTS();
         testToStringNoNegatives();
         testToStringTrailingDecimals();
         testToStringGerman();
         testToStringFrench();
         testToStringNeutral();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>

</head>
<body>

</body>
</html>
