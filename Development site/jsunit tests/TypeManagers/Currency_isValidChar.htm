<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseCulture.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseNumber.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseFloat.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Currency.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.fr-FR.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.de-DE.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Culture%20engine%20using%20jquery-globalize.js" type="text/javascript"></script>
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.
      function testIsValidCharTrue()
      {
         var vInstance1 = jTAC.create("TypeManagers.Currency");
         assertNotNull(vInstance1);
         var vR = vInstance1.isValidChar("1");
         assertEquals(vR, true);
         vR = vInstance1.isValidChar("0");
         assertEquals(vR, true);
         vR = vInstance1.isValidChar("9");
         assertEquals(vR, true);
         vR = vInstance1.isValidChar(",");
         assertEquals(vR, true);
         vR = vInstance1.isValidChar(".");
         assertEquals(vR, true);
         vR = vInstance1.isValidChar("-");
         assertEquals(vR, true);
         vR = vInstance1.isValidChar("$");
         assertEquals(vR, true);
         vR = vInstance1.isValidChar("(");
         assertEquals(vR, true);
         vR = vInstance1.isValidChar(")");
         assertEquals(vR, true);
      }

      function testIsValidCharFalse()
      {
         var vInstance1 = jTAC.create("TypeManagers.Currency");
         assertNotNull(vInstance1);
         var vR = vInstance1.isValidChar("a");
         assertEquals(vR, false);
         vR = vInstance1.isValidChar(" ");
         assertEquals(vR, false);
         var vInstance2 = jTAC.create("TypeManagers.Currency");  // new instance since isValidChar keeps a local reference to a regex around
         assertNotNull(vInstance2);
         vInstance2.setAllowNegatives(false);
         vInstance2.setAllowCurrencySymbol(false);
         vR = vInstance2.isValidChar("-");
         assertEquals(vR, false);
         vR = vInstance2.isValidChar("(");
         assertEquals(vR, false);
         vR = vInstance2.isValidChar(")");
         assertEquals(vR, false);
         vR = vInstance2.isValidChar("$");
         assertEquals(vR, false);

         // valid cases
         vR = vInstance2.isValidChar(",");
         assertEquals(vR, true);
         vR = vInstance2.isValidChar(".");
         assertEquals(vR, true);
      }
      function testIsValidCharIllegalParam()
      {
         var vInstance1 = jTAC.create("TypeManagers.Currency");
         assertNotNull(vInstance1);
         try
         {
            vR = vInstance1.isValidChar(false); // illegal parameter
            fail("Should not get here.");
         }
         catch (e)
         {
         }
      }

      function testIsValidCharGerman()
      {
         var vInstance1 = jTAC.create("TypeManagers.Currency", {cultureName: "de-DE"});
         assertNotNull(vInstance1);
         var vR = vInstance1.isValidChar("1");
         assertEquals(vR, true);
         vR = vInstance1.isValidChar("0");
         assertEquals(vR, true);
         vR = vInstance1.isValidChar("9");
         assertEquals(vR, true);
         vR = vInstance1.isValidChar(",");   // decimal
         assertEquals(vR, true);
         vR = vInstance1.isValidChar(".");   // thousands
         assertEquals(vR, true);
         vR = vInstance1.isValidChar("-");
         assertEquals(vR, true);
         vR = vInstance1.isValidChar("$");   // invalid
         assertEquals("$", vR, false);
         vR = vInstance1.isValidChar("€");
         assertEquals("€", vR, true);
         vR = vInstance1.isValidChar("(");
         assertEquals("(", vR, false);
         vR = vInstance1.isValidChar(")");
         assertEquals(")", vR, false);
         vR = vInstance1.isValidChar(" ");   // space is a separator for negatives
         assertEquals("space", vR, true);
      }

      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testIsValidCharTrue();
         testIsValidCharFalse();
         testIsValidCharIllegalParam();
         testIsValidCharGerman();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>

</head>
<body>

</body>
</html>
