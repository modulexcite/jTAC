<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseString.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseRegionString.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/PhoneNumber.js" type="text/javascript"></script>
   <script type="text/javascript">

      function testNorthAmerica()
      {
         var vInstance1 = jTAC.create("TypeManagers.PhoneNumber");
         assertNotNull(vInstance1);

         vInstance1.region = "UnitedStates";  // will use an alias to get "NorthAmerica".

         ToStringMain(vInstance1, "", "");
         ToStringMain(vInstance1, "12345678901", "1(234) 567-8901");
         ToStringMain(vInstance1, "1 2345678901", "1(234) 567-8901");
         ToStringMain(vInstance1, "1(234)5678901", "1(234) 567-8901");
         ToStringMain(vInstance1, "1 (234)5678901", "1(234) 567-8901");
         ToStringMain(vInstance1, "1234567 8901", "1(234) 567-8901");
         ToStringMain(vInstance1, "1234567-8901", "1(234) 567-8901");
         ToStringMain(vInstance1, "1(234)567-8901", "1(234) 567-8901");
         ToStringMain(vInstance1, "1(234)567 8901", "1(234) 567-8901");
         ToStringMain(vInstance1, "1 (234) 567 8901", "1(234) 567-8901");

         ToStringMain(vInstance1, "2345678901", "(234) 567-8901");  // omit lead 1
         ToStringMain(vInstance1, "(234)5678901", "(234) 567-8901");
         ToStringMain(vInstance1, "234567 8901", "(234) 567-8901");
         ToStringMain(vInstance1, "234567-8901", "(234) 567-8901");
         ToStringMain(vInstance1, "(234)567-8901", "(234) 567-8901");
         ToStringMain(vInstance1, "(234)567 8901", "(234) 567-8901");
         ToStringMain(vInstance1, "(234) 567 8901", "(234) 567-8901");


         ToIllegalStringMain(vInstance1, 1);
         ToIllegalStringMain(vInstance1, "1");
         ToIllegalStringMain(vInstance1, "abc");
         ToIllegalStringMain(vInstance1, "1(2345678901");
         ToIllegalStringMain(vInstance1, "1234)5678901");
         ToIllegalStringMain(vInstance1, "123456789012");    // extra digit
         ToIllegalStringMain(vInstance1, "1  2345678901");   // extra spaces
         ToIllegalStringMain(vInstance1, "1 234    5678901");    // extra spaces
         ToIllegalStringMain(vInstance1, "1(2345)678901");
         ToIllegalStringMain(vInstance1, "1(23)45678901");

         // illegal area codes start with 0 or 1
         ToIllegalStringMain(vInstance1, "10345678901");
         ToIllegalStringMain(vInstance1, "11345678901");
         ToIllegalStringMain(vInstance1, "0345678901");
         ToIllegalStringMain(vInstance1, "1345678901");


      }

      function testNAToNeutral()
      {
         var vInstance1 = jTAC.create("TypeManagers.PhoneNumber");
         assertNotNull(vInstance1);

         vInstance1.region = "UnitedStates";  // will use an alias to get "NorthAmerica".
         // Pattern: "(^([1])?[ ]?((\([2-9]\d{2}\))|([2-9]\d{2}))?[ ]?\d{3}[ \-]?\d{4}$)"
         // Means: 1(###) ####-####.  Formatting characters and lead 1 are optional. Area codes must not start with 0 or 1.

         ToNeutral(vInstance1, "12345678901", "12345678901");
         ToNeutral(vInstance1, "1 2345678901", "12345678901");
         ToNeutral(vInstance1, "1(234)5678901", "12345678901");
         ToNeutral(vInstance1, "1 (234)5678901", "12345678901");
         ToNeutral(vInstance1, "1234567 8901", "12345678901");
         ToNeutral(vInstance1, "1234567-8901", "12345678901");
         ToNeutral(vInstance1, "1(234)567-8901", "12345678901");
         ToNeutral(vInstance1, "1(234)567 8901", "12345678901");
         ToNeutral(vInstance1, "1 (234) 567 8901", "12345678901");

         ToNeutral(vInstance1, "2345678901", "2345678901");  // omit lead 1
         ToNeutral(vInstance1, "(234)5678901", "2345678901");
         ToNeutral(vInstance1, "234567 8901", "2345678901");
         ToNeutral(vInstance1, "234567-8901", "2345678901");
         ToNeutral(vInstance1, "(234)567-8901", "2345678901");
         ToNeutral(vInstance1, "(234)567 8901", "2345678901");
         ToNeutral(vInstance1, "(234) 567 8901", "2345678901");
      }

      function ToNeutral(instance, source, compareTo)
      {
         var r = instance.toValueNeutral(source);
         assertEquals(compareTo, r);
      }


      function testFrance()
      {
         var vInstance1 = jTAC.create("TypeManagers.PhoneNumber");
         assertNotNull(vInstance1);

         vInstance1.region = "France"; 

      // this should just validate and return the exact same string
      // because the window.jTAC_PhoneNumberRegionsData.France definition lacks a toNeutral and toFormat function
        
         ToStringMain(vInstance1, "", "");
         ToStringMain(vInstance1, "01 23 456 789", "01 23 456 789");
         ToStringMain(vInstance1, "01 23 45 67 89", "01 23 45 67 89");
         ToStringMain(vInstance1, "0 123 456 789", "0 123 456 789");
         ToStringMain(vInstance1, "0 123 45 67 89", "0 123 45 67 89");

         ToStringMain(vInstance1, "23 456 789", "23 456 789");
         ToStringMain(vInstance1, "23 45 67 89", "23 45 67 89");
         ToStringMain(vInstance1, "23 456 789", "23 456 789");
         ToStringMain(vInstance1, "23 45 67 89", "23 45 67 89");


         ToIllegalStringMain(vInstance1, 1);
         ToIllegalStringMain(vInstance1, "1");
         ToIllegalStringMain(vInstance1, "abc");
         ToIllegalStringMain(vInstance1, "11 23 456 789");   // lead 1
         ToIllegalStringMain(vInstance1, "0b 23 456 789");   // letter
         ToIllegalStringMain(vInstance1, "01  23 456 789"); 
         ToIllegalStringMain(vInstance1, "0  123 456 789");   // extra spaces
         ToIllegalStringMain(vInstance1, "01 23 456 7890");    // extra digit
         ToIllegalStringMain(vInstance1, "01-23 456 789");
         ToIllegalStringMain(vInstance1, "01 23-456 789");
         ToIllegalStringMain(vInstance1, "01 23-456-789");
         ToIllegalStringMain(vInstance1, "0123456789");

         ToIllegalStringMain(vInstance1, "1(234)5678901");   // valid for N.A.
         ToIllegalStringMain(vInstance1, "01-3-4567");   // valid for Japan
         ToIllegalStringMain(vInstance1, "(012) 34 56 78");   // valid for Germany
         ToIllegalStringMain(vInstance1, "(123)45678901"); // valid for China

      }
      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testNorthAmerica();
         testNAToNeutral();
         testFrance();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>

</head>
<body>

</body>
</html>
