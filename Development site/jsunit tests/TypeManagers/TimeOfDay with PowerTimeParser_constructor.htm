<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseCulture.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseDatesAndTimes.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseTime.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/TimeOfDay.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/PowerTimeParser.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.fr-FR.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.en-US.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.hi-IN.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.ii-CN.js" type="text/javascript"></script>  
   <script src="../../jquery-globalize/cultures/globalize.culture.quz-EC.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.am-ET.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Culture%20engine%20using%20jquery-globalize.js" type="text/javascript"></script>
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.
      function testCreateDefault()
      {
         assertTrue(jTAC.isDefined("TypeManagers.PowerTimeParser"));

         var vInstance1 = jTAC.create("TypeManagers.TimeOfDay");
         assertNotNull(vInstance1);

         assertNotNull(vInstance1._nativeParseTime);
         assertNotNull(vInstance1._nativeValChars);
         assertNotNull(vInstance1.parserOptions);
         assertTrue(vInstance1.parserOptions instanceof jTAC.TypeManagers.PowerTimeParser);
         assertFalse(vInstance1.nativeParser);
         assertEquals("h", vInstance1.parseTimeRequires);

         assertTrue(vInstance1.parserOptions.defaultAM);
         assertTrue(vInstance1.parserOptions.noSecsEnforced);
         assertNull(vInstance1.parserOptions.moreTimeSeps);
         assertTrue(vInstance1.parserOptions.insertTimeSeps);
         assertEquals(0, vInstance1.parserOptions.decimalCharacterMode);
         assertFalse(vInstance1.parserOptions.trimParts);
         assertFalse(vInstance1.parserOptions.fullAMPM);

      }

      function testChangeProperties()
      {
         var vInstance = jTAC.create("TypeManagers.TimeOfDay");
         assertNotNull(vInstance);
        // this does not test the properties already on TimeOfDay, except those added by PowerTimeParse

         setPropertyValue(vInstance, "nativeParser", true);
         
         setPropertyValue(vInstance.parserOptions, "defaultAM", false);
         setPropertyValue(vInstance.parserOptions, "noSecsEnforced", false);
         setPropertyValue(vInstance.parserOptions, "moreTimeSeps", ".");
         setPropertyValue(vInstance.parserOptions, "insertTimeSeps", false);
         setPropertyValue(vInstance.parserOptions, "decimalCharacterMode", 1);
         setPropertyValue(vInstance.parserOptions, "decimalCharacterMode", 2);
         setInvalidPropertyValue(vInstance.parserOptions, "decimalCharacterMode", 3);
         setPropertyValue(vInstance.parserOptions, "trimParts", true);
         setPropertyValue(vInstance.parserOptions, "fullAMPM", true);

         var vInstance2 = jTAC.create("TypeManagers.TimeOfDay");
         assertNotNull(vInstance2);

         vInstance2.parserOptions = {defaultAM: null, noSecsEnforced: false};
         assertNull(vInstance2.parserOptions.defaultAM);
         assertFalse(vInstance2.parserOptions.noSecsEnforced);


      }


      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testCreateDefault();
         testChangeProperties();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>

</head>
<body>

</body>
</html>
