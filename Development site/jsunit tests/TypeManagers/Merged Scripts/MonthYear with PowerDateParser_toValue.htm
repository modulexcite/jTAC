<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.fr-FR.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.en-US.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.hi-IN.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.ii-CN.js" type="text/javascript"></script>  
   <script src="../../../jquery-globalize/cultures/globalize.culture.quz-EC.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.am-ET.js" type="text/javascript"></script>
   <script src="../../../jTAC/Merged/core.js" type="text/javascript"></script>
   <script src="../../../jTAC/Merged/typeManagers-date-time-all.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/TypeManagers/Culture%20engine%20using%20jquery-globalize.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/TypeManagers/PowerDateParser.js" type="text/javascript"></script>
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.

      function testShortPattern()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear");
         assertNotNull(vInstance1);
         var date1 = new Date(2012, 0, 1);
         vInstance1.parserOptions.defaultYear = 2012;   // overrides the current month and year as this code will be used past 2012
         vInstance1.parserOptions.defaultMonth = 0;
         ToValueForDates(vInstance1, "01/2012", date1);
         ToValueForDates(vInstance1, "1/2012", date1);
         ToValueForDates(vInstance1, "01/12", date1);
         ToValueForDates(vInstance1, "1", date1);
         ToValueForDates(vInstance1, " 01/012 ", date1);
         ToValueForDates(vInstance1, "01/", date1); // will assign the year from parserOptions.defaultYear
         ToValueForDates(vInstance1, "/2012", date1); // will assign the month from parserOptions.defaultMonth
         ToValueForDates(vInstance1, "012012", date1);
         ToValueForDates(vInstance1, "0112", date1);
         ToValueForDates(vInstance1, "Jan/2012", date1);  // even though the format expects digits, it recognizes the month name and uses it
         ToValueForDates(vInstance1, "1/012", date1);
         ToIllegalValueMain(vInstance1, "/");
         ToIllegalValueMain(vInstance1, "//");
         ToIllegalValueMain(vInstance1, "1/ 2012");
         ToIllegalValueMain(vInstance1, "1/ 2012");
         ToIllegalValueMain(vInstance1, "1/20120");
         ToIllegalValueMain(vInstance1, "1/1/2012");

         // illegal date values (M/yyyy format)
         ToIllegalValueMain(vInstance1, "13/2012");
         ToIllegalValueMain(vInstance1, "1/10000");
         ToIllegalValueMain(vInstance1, "0/2012");
         ToIllegalValueMain(vInstance1, "132012");

         // check short year century break
         var date2 = new Date(1999, 11, 1);
         ToValueForDates(vInstance1, "12/99", date2);
         ToValueForDates(vInstance1, "12/1999", date2);
         var date3 = new Date(2028, 11, 1);
         ToValueForDates(vInstance1, "12/28", date3);
         ToValueForDates(vInstance1, "12/2028", date3);
         var date4 = new Date(2000, 5, 1);
         ToValueForDates(vInstance1, "6/00", date4);
      }

      function testShortWithMonthName()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear");
         assertNotNull(vInstance1);
         var date1 = new Date(2012, 0, 1);
         vInstance1.parserOptions.defaultYear = 2012;   // overrides the current month and year as this code will be used past 2012
         vInstance1.parserOptions.defaultMonth = 0;
         vInstance1.setDateFormat(1);  // allow month name
         ToValueForDates(vInstance1, "01/2012", date1);
         ToValueForDates(vInstance1, "Jan/2012", date1);
         ToValueForDates(vInstance1, "JAN/2012", date1);
         ToValueForDates(vInstance1, "J/2012", date1);
         ToValueForDates(vInstance1, "Jan/12", date1);
         ToValueForDates(vInstance1, "Jan", date1);
         ToValueForDates(vInstance1, "1", date1);
         ToValueForDates(vInstance1, "Jan", date1);
         ToValueForDates(vInstance1, "Jan12", date1);
         ToValueForDates(vInstance1, "Jan2012", date1);
         ToValueForDates(vInstance1, "January/2012", date1);
      }

      function testAbbrevPattern()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear");
         assertNotNull(vInstance1);
         var date1 = new Date(2000, 1, 1);
         vInstance1.parserOptions.defaultYear = 2000;   // overrides the current month and year
         vInstance1.parserOptions.defaultMonth = 1;
         vInstance1.setDateFormat(10);
         severalDates(vInstance1, "yyyy MMM");
         ToValueForDates(vInstance1, "2000 feb", date1);
         ToValueForDates(vInstance1, "2000 FEB", date1);
         ToValueForDates(vInstance1, "2000, Feb", date1);   // separators are ignored
         ToValueForDates(vInstance1, "2000      FEB", date1);
         ToValueForDates(vInstance1, "2000 Fex", date1); // after it doesn't match to the full names, it uses the first 2 chars of the month name to match against the list again
         ToValueForDates(vInstance1, "2000 F", date1); // after it doesn't match to the full names, it uses the first 2 chars of the month name to match against the list again
         ToValueForDates(vInstance1, "00 Feb", date1);
         ToValueForDates(vInstance1, "2000 2", date1); // month name replaced by month number
         ToValueForDates(vInstance1, "2000, 2", date1);

         ToIllegalValueMain(vInstance1, "Feb 2000");
         ToIllegalValueMain(vInstance1, "19000 Jan");

         ToIllegalValueMain(vInstance1, "1, 2000");
         ToIllegalValueMain(vInstance1, "April");
         ToIllegalValueMain(vInstance1, "2/2000");

         ToIllegalValueMain(vInstance1, "2000 x");
         ToIllegalValueMain(vInstance1, "20000 feb");
      }

      function testLongPattern()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear");
         assertNotNull(vInstance1);
         var date1 = new Date(2000, 1, 1);
         vInstance1.parserOptions.defaultYear = 2000;   // overrides the current month and year
         vInstance1.parserOptions.defaultMonth = 1;
         vInstance1.setDateFormat(20);
         severalDates(vInstance1, "yyyy MMMM");
         ToValueForDates(vInstance1, "2000 february", date1);
         ToValueForDates(vInstance1, "2000 FEBRUARY", date1);
         ToValueForDates(vInstance1, "2000      FEBRUARY", date1);
         ToValueForDates(vInstance1, "2000 Feb", date1);
         ToValueForDates(vInstance1, "2000 Fex", date1);
         ToValueForDates(vInstance1, "2000, February", date1);
         ToValueForDates(vInstance1, "2000, Feb", date1);
         ToValueForDates(vInstance1, "20 April", new Date(2020, 3, 1));
         ToValueForDates(vInstance1, "2000 2", date1); // month name replaced by month number
         ToValueForDates(vInstance1, "2000, 2", date1);

         ToIllegalValueMain(vInstance1, "February 2000");
         ToIllegalValueMain(vInstance1, "19000 February");

         ToIllegalValueMain(vInstance1, "1, 2000");
         ToIllegalValueMain(vInstance1, "April");

         ToIllegalValueMain(vInstance1, "2/2000");

         ToIllegalValueMain(vInstance1, "20000 february");

      }


      function testToValueFrench()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear", {cultureName: "fr-FR"});
         assertNotNull(vInstance1);
         severalDates(vInstance1, "MM/yyyy");

         vInstance1.setDateFormat(1);
         severalDates(vInstance1, "MMM/yyyy");

         vInstance1.setDateFormat(2);
         severalDates(vInstance1, "MMM/yyyy");

         vInstance1.setDateFormat(10);
         severalDates(vInstance1, "MMM yyyy");

         vInstance1.setDateFormat(20);
         severalDates(vInstance1, "MMMM yyyy");

      }

      function testToValueHindi()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear", {cultureName: "hi-IN"});
         assertNotNull(vInstance1);
         severalDates(vInstance1, "MM-yyyy");

         vInstance1.setDateFormat(1);
         severalDates(vInstance1, "MMM-yyyy");

         vInstance1.setDateFormat(2);
         severalDates(vInstance1, "MMM-yyyy");

         vInstance1.setDateFormat(10);
         severalDates(vInstance1, "yyyy MMM");

         vInstance1.setDateFormat(20);
         severalDates(vInstance1, "yyyy MMMM");

      }

      function testToValueChinese()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear", {cultureName: "ii-CN"});
         assertNotNull(vInstance1);
         severalDates(vInstance1, "yyyy/M");
/* this case is not supported. Month names are not used in short date format and filters on short patterns do not account for some of the unicode chars in this string
         vInstance1.setDateFormat(1);
         severalDates(vInstance1, "yyyy/MMM/d");
*/
         // chinese uses the month number and does not use the day of the week. 10-22 are the same
         vInstance1.setDateFormat(10);
         severalDates(vInstance1, "yyyy'ꈎ' M'ꆪ'");

         vInstance1.setDateFormat(20);
         severalDates(vInstance1, "yyyy'ꈎ' M'ꆪ'");

      }

      function testToValueEcuador()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear", {cultureName: "quz-EC"});
         assertNotNull(vInstance1);
         severalDates(vInstance1, "MM/yyyy");

         vInstance1.setDateFormat(1);
         severalDates(vInstance1, "MMM/yyyy");

         vInstance1.setDateFormat(2);
         severalDates(vInstance1, "MMM/yyyy");

         vInstance1.setDateFormat(10);
         severalDates(vInstance1, "MMM' de 'yyyy");

         vInstance1.setDateFormat(20);
         severalDates(vInstance1, "MMMM' de 'yyyy");
      }

      function testToValueEthiopia()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear", {cultureName: "am-ET"});
         assertNotNull(vInstance1);
         severalDates(vInstance1, "M/yyyy");

         vInstance1.setDateFormat(1);
         severalDates(vInstance1, "MMM/yyyy");

         vInstance1.setDateFormat(2);
         severalDates(vInstance1, "MMM/yyyy");

         // create another to avoid the cached data reflecting a very different format. Above uses d/m/y. Below uses m/d/y.
         var vInstance2 = jTAC.create("TypeManagers.MonthYear", {cultureName: "am-ET"});
         assertNotNull(vInstance2);
         vInstance2.setDateFormat(10);
         severalDates(vInstance2, "MMM 'ቀን' yyyy");

         vInstance2.setDateFormat(20);
         severalDates(vInstance2, "MMMM 'ቀን' yyyy");
      }

      function severalDates(instance, pattern)
      {
         var dtfi = instance._culture().calendars.standard;
         pattern = pattern.replace(/'/g, "");
         var date1 = new Date(2012, 0, 1);   // jan
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date1), date1);
         var date2 = new Date(2005, 11, 1); // dec
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date2), date2);
         var date3 = new Date(1980, 7, 1); // aug
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date3), date3);
         var date4 = new Date(1965, 4, 1); // may
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date4), date4);
         var date5 = new Date(2100, 1, 1); // feb
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date5), date5);
         var date6 = new Date(2000, 8, 1); // sep
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date6), date6);
         var date7 = new Date(2005, 10, 1); // nov
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date7), date7);
         var date8 = new Date(1903, 9, 1); // oct
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date8), date8);
      }

      function testOptionMonthAllows()
      {
         // try parser
         var vInstance1 = new jTAC.create("TypeManagers.MonthYear");  
         vInstance1.parserOptions.monthAsTwoCharName = false;
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance1, "01/2012", date1);
         ToValueForDates(vInstance1, "Jan/2012", date1);

         vInstance1.parserOptions.monthAllows = 1; // only digits
         ToValueForDates(vInstance1, "01/2012", date1);
         ToIllegalValueMain(vInstance1, "Jan/2012");

         vInstance1.parserOptions.monthAllows = 2; // only month names
         ToIllegalValueMain(vInstance1, "01/2012");
         ToValueForDates(vInstance1, "Jan/2012", date1);
         ToValueForDates(vInstance1, "January/2012", date1);

         vInstance1.parserOptions.monthAllows = 3; // only month names, using abbreviated
         ToIllegalValueMain(vInstance1, "01/2012");
         ToValueForDates(vInstance1, "Jan/2012", date1);
         ToIllegalValueMain(vInstance1, "January/2012");

         var vInstance2 = new jTAC.create("TypeManagers.MonthYear");  
         vInstance2.parserOptions.monthAsTwoCharName = false;
         vInstance2.dateFormat = 10;
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance2, "2012 01", date1);
         ToValueForDates(vInstance2, "2012 Jan", date1);

         vInstance2.parserOptions.monthAllows = 1; // only digits
         ToValueForDates(vInstance2, "2012 01", date1);
         ToIllegalValueMain(vInstance2, "2012 Jan");

         vInstance2.parserOptions.monthAllows = 2; // only month names
         ToIllegalValueMain(vInstance2, "2012 01");
         ToValueForDates(vInstance2, "2012 Jan", date1);
         ToValueForDates(vInstance2, "2012 January", date1);

         vInstance2.parserOptions.monthAllows = 3; // only abbrev month names
         ToIllegalValueMain(vInstance2, "2012 01");
         ToValueForDates(vInstance2, "2012 Jan", date1);
         ToIllegalValueMain(vInstance2, "2012 January");

         var vInstance3 = new jTAC.create("TypeManagers.MonthYear");  
         vInstance3.parserOptions.monthAsTwoCharName = false;
         vInstance3.dateFormat = 20;
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance3, "2012 01", date1);
         ToValueForDates(vInstance3, "2012 January", date1);
         ToValueForDates(vInstance3, "2012 Jan", date1);

         vInstance3.parserOptions.monthAllows = 1; // only digits
         ToValueForDates(vInstance3, "2012 01", date1);
         ToIllegalValueMain(vInstance3, "2012 January");
         ToIllegalValueMain(vInstance3, "2012 Jan");

         vInstance3.parserOptions.monthAllows = 2; // only month names
         ToIllegalValueMain(vInstance3, "2012 01");
         ToValueForDates(vInstance3, "2012 January", date1);
         ToValueForDates(vInstance3, "2012 Jan", date1);

         vInstance3.parserOptions.monthAllows = 3; // only abbrev month names
         // due to a conflict between dateFormat = 20 and monthAllows = 3, it works like monthAllows = 2 when DateFormat=20
         ToIllegalValueMain(vInstance3, "2012 01");
         ToValueForDates(vInstance3, "2012 January", date1);
         ToValueForDates(vInstance3, "2012 Jan", date1);
      }

      function testOptionMonthAsTwoCharName()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear");
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance1, "Jan/2012", date1);
         ToValueForDates(vInstance1, "Jaxyz/2012", date1);

         vInstance1.parserOptions.monthAsTwoCharName = false;
         ToValueForDates(vInstance1, "Jan/2012", date1);
         ToIllegalValueMain(vInstance1, "Jaxyz/2012");

         var vInstance2 = jTAC.create("TypeManagers.MonthYear");
         vInstance2.dateFormat = 10;
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance2, "2012 Jan", date1);
         ToValueForDates(vInstance2, "2012 Jaxzy", date1);

         vInstance2.parserOptions.monthAsTwoCharName = false;
         ToValueForDates(vInstance2, "2012 Jan", date1);
         ToIllegalValueMain(vInstance2, "2012 Jaxzy");

         var vInstance3 = jTAC.create("TypeManagers.MonthYear");
         vInstance3.dateFormat = 20;
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance3, "2012 January", date1);
         ToValueForDates(vInstance3, "2012 Jaxyz", date1);

         vInstance3.parserOptions.monthAsTwoCharName = false;
         ToValueForDates(vInstance3, "2012 January", date1);
         ToIllegalValueMain(vInstance3, "2012 Jaxyz");

      }

      
      function testOptionInsertDateSeps()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear");
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance1, "01/2012", date1);
         ToValueForDates(vInstance1, "012012", date1);

         vInstance1.parserOptions.insertDateSeps = false;
         ToValueForDates(vInstance1, "01/2012", date1);
         ToIllegalValueMain(vInstance1, "012012", date1);

         // has no impact on dateFormat = 10 or 20.
         var vInstance2 = jTAC.create("TypeManagers.MonthYear");
         vInstance2.dateFormat = 10;
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance2, "2012 Jan", date1);

         vInstance2.parserOptions.insertDateSeps = false;
         ToValueForDates(vInstance2, "2012 Jan", date1);

         var vInstance3 = jTAC.create("TypeManagers.MonthYear");
         vInstance3.dateFormat = 20;
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance3, "2012 January", date1);

         vInstance3.parserOptions.insertDateSeps = false;
         ToValueForDates(vInstance3, "2012 January", date1);

      }      


      function testOptionTwoDigitYear()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear");
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance1, "1/12", date1);
         ToValueForDates(vInstance1, "Jan/12", date1);

         vInstance1.twoDigitYear = false;
         ToValueForDates(vInstance1, "01/2012", date1);
         ToIllegalValueMain(vInstance1, "1/12");
         ToIllegalValueMain(vInstance1, "Jan/12");

         var vInstance2 = jTAC.create("TypeManagers.MonthYear");
         vInstance2.dateFormat = 10;
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance2, "12 Jan", date1);

         vInstance2.twoDigitYear = false;
         ToValueForDates(vInstance2, "2012 Jan", date1);
         ToIllegalValueMain(vInstance2, "12 Jan", date1);

         var vInstance3 = jTAC.create("TypeManagers.MonthYear");
         vInstance3.dateFormat = 20;
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance3, "2012 January", date1);
         ToValueForDates(vInstance3, "12 January", date1);

         vInstance3.twoDigitYear = false;
         ToValueForDates(vInstance3, "2012 January", date1);
         ToIllegalValueMain(vInstance3, "12 January");

      }

      function testOptionMoreDateSeps()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear");
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance1, "01/2012", date1);
         ToIllegalValueMain(vInstance1, "01,2012");
         ToIllegalValueMain(vInstance1, "01+2012");

         vInstance1.parserOptions.moreDateSeps = ",+";
         ToValueForDates(vInstance1, "01/2012", date1);
         ToValueForDates(vInstance1, "01,2012", date1);
         ToValueForDates(vInstance1, "01+2012", date1);

         // has no impact on dateFormat = 10 or 20.
         var vInstance2 = jTAC.create("TypeManagers.MonthYear");
         vInstance2.dateFormat = 10;
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance2, "2012 Jan", date1);

         vInstance2.parserOptions.moreDateSeps = ",+";
         ToValueForDates(vInstance2, "2012 Jan", date1);

         var vInstance3 = jTAC.create("TypeManagers.MonthYear");
         vInstance3.dateFormat = 20;
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(vInstance3, "2012 January", date1);

         vInstance3.parserOptions.moreDateSeps = ",+";
         ToValueForDates(vInstance3, "2012 January", date1);

      }      

      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testShortPattern();
         testShortWithMonthName();
         testAbbrevPattern();
         testLongPattern();
         testToValueFrench();
         testToValueHindi();
         testToValueChinese();
         testToValueEcuador();
         testToValueEthiopia();
         testOptionInsertDateSeps();
         testOptionMonthAllows();
         testOptionMonthAsTwoCharName();
         testOptionTwoDigitYear();
         testOptionMoreDateSeps();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }
   </script>

</head>
<body>

</body>
</html>
