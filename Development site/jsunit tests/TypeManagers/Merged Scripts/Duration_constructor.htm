<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.fr-FR.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.en-US.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.hi-IN.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.ii-CN.js" type="text/javascript"></script>  
   <script src="../../../jquery-globalize/cultures/globalize.culture.quz-EC.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.am-ET.js" type="text/javascript"></script>
   <script src="../../../jTAC/Merged/core.js" type="text/javascript"></script>
   <script src="../../../jTAC/Merged/typeManagers-date-time-all.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/TypeManagers/Culture%20engine%20using%20jquery-globalize.js" type="text/javascript"></script>

</head>
<body>
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.
      function testCreateDefault()
      {
         var vInstance1 = jTAC.create("TypeManagers.Duration"); 
         assertNotNull(vInstance1);

         assertEquals("", vInstance1.getCultureName());
         assertEquals("object", vInstance1.nativeTypeName());
         assertEquals("duration", vInstance1.dataTypeName());
         assertEquals("time", vInstance1.storageTypeName());
         assertEquals(10, vInstance1.timeFormat);
         assertFalse(vInstance1.useUTC);
         assertFalse(vInstance1.valueAsNumber);
         assertEquals(1, vInstance1.timeOneEqualsSeconds);
         assertEquals(9999, vInstance1.maxHours);
         assertFalse(vInstance1.parseStrict);
         assertEquals("h", vInstance1.parseTimeRequires);

         var vInstance2 = jTAC.create("TypeManagers.Duration", {valueAsNumber: true});  
         assertNotNull(vInstance2);

         assertEquals("", vInstance2.getCultureName());
         assertEquals("number", vInstance2.nativeTypeName());
         assertEquals("duration", vInstance2.dataTypeName());
         assertEquals("float", vInstance2.storageTypeName());
         assertEquals(10, vInstance2.timeFormat);
         assertFalse(vInstance2.useUTC);
         assertTrue(vInstance2.valueAsNumber);
         assertEquals(1, vInstance2.timeOneEqualsSeconds);

      }

      function testCreateFrench()
      {
         var vInstance1 = jTAC.create("TypeManagers.Duration", {cultureName: "fr-FR"}); 
         assertNotNull(vInstance1);
         assertEquals("fr-FR", vInstance1.getCultureName());
      }

      function testCreateSetAllProperties()
      {
         var vInstance = jTAC.create("TypeManagers.Duration", {cultureName: "fr-FR", valueAsNumber: true, timeOneEqualsSeconds: 100, timeFormat: 11}); 

         assertNotNull(vInstance);
         assertEquals("number", vInstance.nativeTypeName());
         assertEquals("duration", vInstance.dataTypeName());
         assertEquals("float", vInstance.storageTypeName());
         assertEquals("fr-FR", vInstance.getCultureName());
         assertEquals(11, vInstance.timeFormat);
         assertEquals(100, vInstance.timeOneEqualsSeconds);

      // change the properties
         setPropertyValue(vInstance, "cultureName", "en-US");
         setInvalidPropertyValue(vInstance, "timeFormat", 0);
         setInvalidPropertyValue(vInstance, "timeFormat", 1);
         setInvalidPropertyValue(vInstance, "timeFormat", 2);
         setPropertyValue(vInstance, "timeFormat", 10);
         setPropertyValue(vInstance, "timeFormat", 11);
         setPropertyValue(vInstance, "timeFormat", 12);
         setInvalidPropertyValue(vInstance, "timeFormat", 13);
         setPropertyValue(vInstance, "timeOneEqualsSeconds", 3600);
         setPropertyValue(vInstance, "maxHours", 100);
         setPropertyValue(vInstance, "useUTC", true);
         setPropertyValue(vInstance, "parseStrict", true);
         setPropertyValue(vInstance, "parseTimeRequires", "s");
         setPropertyValue(vInstance, "parseTimeRequires", "m");
         setPropertyValue(vInstance, "parseTimeRequires", "h");
         setInvalidPropertyValue(vInstance, "parseTimeRequires", "H");
         setInvalidPropertyValue(vInstance, "parseTimeRequires", "d");

         setPropertyValue(vInstance, "valueAsNumber", false);
         assertEquals("object", vInstance.nativeTypeName());
         assertEquals("duration", vInstance.dataTypeName());
         assertEquals("time", vInstance.storageTypeName());

      }

      function testTimePatterns()
      {
         var vInstance1 = jTAC.create("TypeManagers.Duration"); 
         assertNotNull(vInstance1);

         TimePatternCheck(vInstance1, 10, "H:mm:ss");

         TimePatternCheck(vInstance1, 11, "H:mm");

         TimePatternCheck(vInstance1, 12, "H:mm:ss");
      }


      function testTimePatternsFrench()
      {
         var vInstance1 = jTAC.create("TypeManagers.Duration", {cultureName: "fr-FR"}); 
         assertNotNull(vInstance1);

         TimePatternCheck(vInstance1, 10, "HH:mm:ss");

         TimePatternCheck(vInstance1, 11, "HH:mm");

         TimePatternCheck(vInstance1, 12, "HH:mm:ss");
      }

      function testTimePatternsHindi()
      {
         var vInstance1 = jTAC.create("TypeManagers.Duration", {cultureName: "hi-IN"}); 
         assertNotNull(vInstance1);

         TimePatternCheck(vInstance1, 10, "HH:mm:ss");

         TimePatternCheck(vInstance1, 11, "HH:mm");

         TimePatternCheck(vInstance1, 12, "HH:mm:ss");

      }

      function testTimePatternsChinese()
      {
         var vInstance1 = jTAC.create("TypeManagers.Duration", {cultureName: "ii-CN"}); 
         assertNotNull(vInstance1);
         TimePatternCheck(vInstance1, 10, "H:mm:ss");

         TimePatternCheck(vInstance1, 11, "H:mm");

         TimePatternCheck(vInstance1, 12, "H:mm:ss");

      }

      function testTimePatternsEcuador()
      {
         var vInstance1 = jTAC.create("TypeManagers.Duration", {cultureName: "quz-EC"}); 
         assertNotNull(vInstance1);
         TimePatternCheck(vInstance1, 10, "H:mm:ss");

         TimePatternCheck(vInstance1, 11, "H:mm");

         TimePatternCheck(vInstance1, 12, "H:mm:ss");

      }

      function testTimePatternsEthiopia()
      {
         var vInstance1 = jTAC.create("TypeManagers.Duration", {cultureName: "am-ET"}); 
         assertNotNull(vInstance1);
         TimePatternCheck(vInstance1, 10, "H:mm:ss");

         TimePatternCheck(vInstance1, 11, "H:mm");

         TimePatternCheck(vInstance1, 12, "H:mm:ss");
      }
      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testCreateDefault();
         testCreateFrench();
         testCreateSetAllProperties();
         testTimePatterns();
         testTimePatternsFrench();
         testTimePatternsHindi();
         testTimePatternsChinese();
         testTimePatternsEcuador();
         testTimePatternsEthiopia();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>

</body>
</html>
