<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.fr-FR.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.de-DE.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/Merged/core.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/Merged/typemanagers-numbers.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/TypeManagers/Culture%20engine%20using%20jquery-globalize.js" type="text/javascript"></script>
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.

      function testToValue()
      {
         var vInstance1 = jTAC.create("TypeManagers.Percent");
         assertNotNull(vInstance1);
         ToValueMain(vInstance1, "1020.30%", 10.203);
         ToValueMain(vInstance1, "1020.30", 10.203);
         ToValueMain(vInstance1, "1,020.30", 10.203);
         ToValueMain(vInstance1, "1020.30 %", 10.203);
         ToValueMain(vInstance1, "1020.3%", 10.203);
         ToValueMain(vInstance1, "1020.%", 10.2);
         ToValueMain(vInstance1, "1020%", 10.2);
         ToValueMain(vInstance1, "1020", 10.2);
         ToValueMain(vInstance1, "1,020", 10.2);
         ToValueMain(vInstance1, "1,000,000.30%", 10000.003);
         ToValueMain(vInstance1, "1,00,0,0,00.30%", 10000.003);  // extra thousands separators are ignored
         ToValueMain(vInstance1, "-1020.30%", -10.203);
         ToValueMain(vInstance1, "-1020.30", -10.203);
         ToValueMain(vInstance1, "-1,020.30%", -10.203);
         ToValueMain(vInstance1, "-1,020.30", -10.203);
         ToValueMain(vInstance1, "%1,000,000.30", 10000.003); // because it strips the % in any position before processing the number
      }

      function testToValueOneEqualsOne()
      {
         var vInstance1 = jTAC.create("TypeManagers.Percent");
         assertNotNull(vInstance1);
         vInstance1.setOneEqualsOneHundred(false);
         ToValueMain(vInstance1, "1020.30%", 1020.3);
         ToValueMain(vInstance1, "1020.30", 1020.3);
         ToValueMain(vInstance1, "1,020.30", 1020.3);
         ToValueMain(vInstance1, "1020.30 %", 1020.3);
         ToValueMain(vInstance1, "1020.3%", 1020.3);
         ToValueMain(vInstance1, "1020.%", 1020);
         ToValueMain(vInstance1, "1020%", 1020);
         ToValueMain(vInstance1, "1020", 1020);
         ToValueMain(vInstance1, "1,020", 1020);
         ToValueMain(vInstance1, "1,000,000.30%", 1000000.30);
         ToValueMain(vInstance1, "1,00,0,0,00.30%", 1000000.30);  // extra thousands separators are ignored
         ToValueMain(vInstance1, "-1020.30%", -1020.3);
         ToValueMain(vInstance1, "-1020.30", -1020.3);
         ToValueMain(vInstance1, "-1,020.30%", -1020.3);
         ToValueMain(vInstance1, "-1,020.30", -1020.3);
         ToValueMain(vInstance1, "%1,000,000.30", 1000000.30); // because it strips the % in any position before processing the number
      }

      function testToIllegalValue()
      {
         var vInstance1 = jTAC.create("TypeManagers.Percent");
         assertNotNull(vInstance1);
         ToIllegalValueMain(vInstance1, "1020a03");
         ToIllegalValueMain(vInstance1, "1,020.3.0");
         ToIllegalValueMain(vInstance1, "(1,020.30)");
         vInstance1.setAllowNegatives(false);
         ToIllegalValueMain(vInstance1, "-1,020.30");
         vInstance1.setAllowPercentSymbol(false);
         ToIllegalValueMain(vInstance1, "1,020.30%");
         ToIllegalValueMain(vInstance1, "-1,020.30%");
      }

      function testStrictSymbols()
      {
         var vInstance1 = jTAC.create("TypeManagers.Percent");
         assertNotNull(vInstance1);

         vInstance1.strictSymbols = true;
         ToValueMain(vInstance1, "1000.00%", 10);
         ToValueMain(vInstance1, "1000.00 %", 10);
         ToValueMain(vInstance1, "1000.00", 10);
         ToValueMain(vInstance1, "-1000.00", -10);
         ToValueMain(vInstance1, "-1000", -10);
         ToValueMain(vInstance1, "-1000.00%", -10);
         ToIllegalValueMain(vInstance1, "1000.00-");
         ToIllegalValueMain(vInstance1, "%1000.00");
         ToIllegalValueMain(vInstance1, "- 1000");
         ToIllegalValueMain(vInstance1, "1000%-");
         ToIllegalValueMain(vInstance1, "1000-%");
      }


      function testToValueGerman()
      {
         var vInstance1 = jTAC.create("TypeManagers.Percent", {cultureName: "de-DE"});
         assertNotNull(vInstance1);
         ToValueMain(vInstance1, "1.000.000,30%", 10000.003);
         ToValueMain(vInstance1, "-1.000.000,30%", -10000.003);
         ToValueMain(vInstance1, "-1.000.000,30 %", -10000.003);
         ToValueMain(vInstance1, "-1000000,30%", -10000.003);
         ToValueMain(vInstance1, "1000000,30", 10000.003);
         ToValueMain(vInstance1, "1.00.0.00.0,30%", 10000.003); // extra thousands separators are ignored
         ToValueMain(vInstance1, "%1.000.000,30", 10000.003); // because it strips the % in any position before processing the number
         ToIllegalValueMain(vInstance1, "1,000,000.30"); //  illegal thousands separators
         ToIllegalValueMain(vInstance1, "$1.000.000,30"); // illegal percent symbol
         ToIllegalValueMain(vInstance1, "(1.000.000,30)"); // illegal negative symbol
         ToIllegalValueMain(vInstance1, "1.000.000,3,0"); //  extra decimal separator
         ToIllegalValueMain(vInstance1, "01baddata");

         vInstance1.setAllowNegatives(false);
         ToIllegalValueMain(vInstance1, "-1020,30");
         ToIllegalValueMain(vInstance1, "-1.020,30%");
         vInstance1.setAllowPercentSymbol(false);
         ToIllegalValueMain(vInstance1, "1.020,30%");

      }

      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testToValue();
         testToValueOneEqualsOne();
         testToIllegalValue();
         testStrictSymbols();
         testToValueGerman();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>

</head>
<body>

</body>
</html>
