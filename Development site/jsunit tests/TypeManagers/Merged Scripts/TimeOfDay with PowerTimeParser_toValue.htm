<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.fr-FR.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.de-DE.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.en-US.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.hi-IN.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.ii-CN.js" type="text/javascript"></script>  
   <script src="../../../jquery-globalize/cultures/globalize.culture.quz-EC.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/cultures/globalize.culture.am-ET.js" type="text/javascript"></script>
   <script src="../../../jTAC/Merged/core.js" type="text/javascript"></script>
   <script src="../../../jTAC/Merged/typeManagers-date-time.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/TypeManagers/Culture%20engine%20using%20jquery-globalize.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/TypeManagers/PowerTimeParser.js" type="text/javascript"></script>
   <script src="../../../jTAC/Merged/typeManagers-numbers.js" type="text/javascript"></script>

</head>
<body>
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.

      function severalTimes(instance, textToParse, zerosecs, zerominutes)
      {
         textToParse = textToParse.replace(/'/g, "");

         var date1 = new Date(2012, 0, 1, 0, 0, 0);
         var date2 = new Date(2012, 0, 1, 12, 0, 0);
         var date3 = new Date(2012, 0, 1, 11, zerominutes ? 0 : 59, zerosecs ? 0 : 59);
         var date4 = new Date(2012, 0, 1, 23, zerominutes ? 0 : 59, zerosecs ? 0 : 59);

         ToValueForTimes(instance, UpdatePatternWithTime(instance, textToParse, date1), 0, 0, 0);
         ToValueForTimes(instance, UpdatePatternWithTime(instance, textToParse, date2), 12, 0, 0);
         ToValueForTimes(instance, UpdatePatternWithTime(instance, textToParse, date3), 11, zerominutes ? 0 : 59, zerosecs ? 0 : 59);
         ToValueForTimes(instance, UpdatePatternWithTime(instance, textToParse, date4), 23, zerominutes ? 0 : 59, zerosecs ? 0 : 59);
      }
      function testToValue()
      {
         var vInstance1 = jTAC.create("TypeManagers.TimeOfDay");
         assertNotNull(vInstance1);
         severalTimes(vInstance1, "h:mm:ss tt");
         severalTimes(vInstance1, "hh:mm:ss tt");
         severalTimes(vInstance1, "H:mm:ss");
         severalTimes(vInstance1, "HH:mm:ss");
         severalTimes(vInstance1, "h:mm:sstt");
         severalTimes(vInstance1, "hh:mm:sstt");
         severalTimes(vInstance1, "tt h:mm:ss");
         severalTimes(vInstance1, "tt hh:mm:ss");
         severalTimes(vInstance1, "tth:mm:ss");
         severalTimes(vInstance1, "tthh:mm:ss");
         severalTimes(vInstance1, "h:mm tt", true);
         severalTimes(vInstance1, "H:mm", true);
         severalTimes(vInstance1, "hh:mm tt", true);
         severalTimes(vInstance1, "HH:mm", true);
         severalTimes(vInstance1, "H:mm:ss tt");   // mixing 24 hour and AM/PM
         severalTimes(vInstance1, "HH:mm:ss tt");
         severalTimes(vInstance1, "h:mm: tt", true);

      // parseTimeRequires determines if minutes and seconds are required. By default minutes are required
         var saved = vInstance1.parseTimeRequires;
         setPropertyValue(vInstance1, "parseTimeRequires", "s");
         ToValueForTimes(vInstance1, "1:01:02 PM", 13, 1, 2);
         ToIllegalValueMain(vInstance1, "1:01 PM");
         ToIllegalValueMain(vInstance1, "1 PM");
         ToIllegalValueMain(vInstance1, "13");
         setPropertyValue(vInstance1, "parseTimeRequires", "m");
         ToValueForTimes(vInstance1, "1:01:02 PM", 13, 1, 2);
         ToValueForTimes(vInstance1, "1:01 PM", 13, 1, 0);
         ToIllegalValueMain(vInstance1, "1 PM");
         ToIllegalValueMain(vInstance1, "13");
         setPropertyValue(vInstance1, "parseTimeRequires", "h");
         ToValueForTimes(vInstance1, "1:01:02 PM", 13, 1, 2);
         ToValueForTimes(vInstance1, "1:01 PM", 13, 1, 0);
         ToValueForTimes(vInstance1, "1 PM", 13, 0, 0);
         ToValueForTimes(vInstance1, "13", 13, 0, 0);
         ToValueForTimes(vInstance1, "12:: AM", 0, 0, 0);
         ToValueForTimes(vInstance1, "12::01 AM", 0, 0 ,1);
         vInstance1.parseTimeRequires = saved; // restore default


         var date1 = new Date(2012, 0, 1, 2, 3, 0);
         var date2 = new Date(2012, 0, 1, 2, 3, 1);
         var date3 = new Date(2012, 0, 1, 14, 3, 0);
         var date4 = new Date(2012, 0, 1, 14, 3, 1);
         ToValueForTimes(vInstance1, "2:03 AM", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:3 AM", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:3: AM", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03:00 AM", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03:00AM", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03:00 A", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03:00 am", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03:00 AM", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03 a", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:3 am", 2, 3, 0);
/* parser.timeParts is off by default. Tested elsewhere
         ToValueForTimes(vInstance1, "2 :03:00 AM", 2, 3, 0);
         ToValueForTimes(vInstance1, "2: 03:00 AM", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03 :00 AM", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03: 00 AM", 2, 3, 0);
*/
         ToValueForTimes(vInstance1, "2:03", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:3", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:3:", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03:00", 2, 3, 0);

         ToValueForTimes(vInstance1, "2:03:01 AM", 2, 3, 1);
         ToValueForTimes(vInstance1, "2:3:01 AM", 2, 3, 1);
         ToValueForTimes(vInstance1, "2:03:1 AM", 2, 3, 1);
         ToValueForTimes(vInstance1, "2:03:01 am", 2, 3, 1);
         ToValueForTimes(vInstance1, "2:03:01 A", 2, 3, 1);
         ToValueForTimes(vInstance1, "2:03:01AM", 2, 3, 1);
         ToValueForTimes(vInstance1, "2:03:01a", 2, 3, 1);


         ToValueForTimes(vInstance1, "2:03 PM", 14, 3, 0);
         ToValueForTimes(vInstance1, "2:3 PM", 14, 3, 0);
         ToValueForTimes(vInstance1, "2:3: PM", 14, 3, 0);
         ToValueForTimes(vInstance1, "2:03:00 PM", 14, 3, 0);
         ToValueForTimes(vInstance1, "2:03:00PM", 14, 3, 0);
         ToValueForTimes(vInstance1, "2:03:00 P", 14, 3, 0);
         ToValueForTimes(vInstance1, "2:03:00 pm", 14, 3, 0);
         ToValueForTimes(vInstance1, "2:03:00 PM", 14, 3, 0);
         ToValueForTimes(vInstance1, "2:03 p", 14, 3, 0);
         ToValueForTimes(vInstance1, "2:3 pm", 14, 3, 0);
         ToValueForTimes(vInstance1, "14:03:00", 14, 3, 0);
         ToValueForTimes(vInstance1, "14:03", 14, 3, 0);
         ToValueForTimes(vInstance1, "14:03:", 14, 3, 0);
         ToValueForTimes(vInstance1, "14:3:0", 14, 3, 0);
         ToValueForTimes(vInstance1, "14:03:00 PM", 14, 3, 0);
         ToValueForTimes(vInstance1, "14:03:00 AM", 14, 3, 0); // 14 takes precidence over AM

         ToValueForTimes(vInstance1, "2:03:01 PM", 14, 3, 1);
         ToValueForTimes(vInstance1, "2:3:01 PM", 14, 3, 1);
         ToValueForTimes(vInstance1, "2:03:1 PM", 14, 3, 1);
         ToValueForTimes(vInstance1, "2:03:01 pm", 14, 3, 1);
         ToValueForTimes(vInstance1, "2:03:01 P", 14, 3, 1);
         ToValueForTimes(vInstance1, "2:03:01PM", 14, 3, 1);
         ToValueForTimes(vInstance1, "2:03:01p", 14, 3, 1);
         ToValueForTimes(vInstance1, "14:03:01", 14, 3, 1);
         ToValueForTimes(vInstance1, "14:3:01", 14, 3, 1);
         ToValueForTimes(vInstance1, "14:03:1", 14, 3, 1);
         ToValueForTimes(vInstance1, "14:03:01 PM", 14, 3, 1);
         ToValueForTimes(vInstance1, "14:03:01 AM", 14, 3, 1); // 14 takes precidence over AM

         ToValueForTimes(vInstance1, "0:00:00", 0, 0, 0);
         ToValueForTimes(vInstance1, "0:00:00 AM", 0, 0, 0);
         ToValueForTimes(vInstance1, "0:00:00 PM", 12, 0, 0);
         ToValueForTimes(vInstance1, "12:00:00", 12, 0, 0);


         ToIllegalValueMain(vInstance1, "24:00:00");
//         ToIllegalValueMain(vInstance1, "-5:00:00 PM");   // this is legal only because the code ignores text outside of the digit pattern
         ToIllegalValueMain(vInstance1, "-5:-00:00 PM");
         ToIllegalValueMain(vInstance1, "1:60:00");
         ToIllegalValueMain(vInstance1, "1:00:60");
         ToIllegalValueMain(vInstance1, "abc");
         ToIllegalValueMain(vInstance1, "1 30 00 PM");

      }

      function testToValueFrench()
      {
         var vInstance1 = jTAC.create("TypeManagers.TimeOfDay", {cultureName: "fr-FR"});
         assertNotNull(vInstance1);
         severalTimes(vInstance1, "H:mm:ss");
         severalTimes(vInstance1, "HH:mm:ss");

         ToValueForTimes(vInstance1, "2:03", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03:01", 2, 3, 1);
         ToValueForTimes(vInstance1, "14:03", 14, 3, 0);
         ToValueForTimes(vInstance1, "14:03:01", 14, 3, 1);
      }

      function testToValueHindi()
      {
         var vInstance1 = jTAC.create("TypeManagers.TimeOfDay", {cultureName: "hi-IN"});
         assertNotNull(vInstance1);
         severalTimes(vInstance1, "H:mm:ss");
         severalTimes(vInstance1, "HH:mm:ss");

         ToValueForTimes(vInstance1, "2:03", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03:01", 2, 3, 1);
         ToValueForTimes(vInstance1, "14:03", 14, 3, 0);
         ToValueForTimes(vInstance1, "14:03:01", 14, 3, 1);
      }

      function testToValueEcuador()
      {
         var vInstance1 = jTAC.create("TypeManagers.TimeOfDay", {cultureName: "quz-EC"});
         severalTimes(vInstance1, "H:mm:ss");
         severalTimes(vInstance1, "HH:mm:ss");

         ToValueForTimes(vInstance1, "2:03", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03:01", 2, 3, 1);
         ToValueForTimes(vInstance1, "14:03", 14, 3, 0);
         ToValueForTimes(vInstance1, "14:03:01", 14, 3, 1);
      }
      function testToValueEthiopia()
      {
         var vInstance1 = jTAC.create("TypeManagers.TimeOfDay", {cultureName: "am-ET"});
         assertNotNull(vInstance1);
         severalTimes(vInstance1, "h:mm:ss tt");
         severalTimes(vInstance1, "hh:mm:ss tt");


         ToValueForTimes(vInstance1, "2:03 ጡዋት", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03:01 ጡዋት", 2, 3, 1);
         ToValueForTimes(vInstance1, "2:03 ከሰዓት", 14, 3, 0);
         ToValueForTimes(vInstance1, "2:03:01 ከሰዓት", 14, 3, 1);

         ToValueForTimes(vInstance1, "2:03", 2, 3, 0);
         ToValueForTimes(vInstance1, "2:03:01", 2, 3, 1);
         ToValueForTimes(vInstance1, "14:03", 14, 3, 0);
         ToValueForTimes(vInstance1, "14:03:01", 14, 3, 1);
      }

      function testToValueAsNumber()
      {
         var vInstance1 = jTAC.create("TypeManagers.TimeOfDay", {valueAsNumber: true, timeOneEqualsSeconds: 1});
         assertNotNull(vInstance1);
         ToValueMain(vInstance1, "2:03:00 AM", 2 * 3600 + 3 * 60 + 0);
         ToValueMain(vInstance1, "2:03:30 PM", 14 * 3600 + 3 * 60 + 30);
         ToValueMain(vInstance1, "12:00:00 AM", 0);
         ToValueMain(vInstance1, "12:00:00 PM", 12 * 3600);
         ToValueMain(vInstance1, "11:59:59 AM", (12 * 3600) - 1);

         var vInstance2 = jTAC.create("TypeManagers.TimeOfDay", {valueAsNumber: true, timeOneEqualsSeconds: 3600});
         assertNotNull(vInstance2);
         ToValueMain(vInstance2, "2:00:00 AM", 2);
         ToValueMain(vInstance2, "2:00:00 PM", 14);
         ToValueMain(vInstance2, "2:30:00 AM", 2.5);
         ToValueMain(vInstance2, "2:30:00 PM", 14.5);

      }
      function testToValueDecimalCharacterMode()
      {
         var vInstance1 = jTAC.create("TypeManagers.TimeOfDay", {valueAsNumber: true, timeOneEqualsSeconds: 1});
         assertNotNull(vInstance1);
         vInstance1.parserOptions.decimalCharacterMode = 1; // decimal values allowed
         ToValueMain(vInstance1, "2:03:00 AM", 2 * 3600 + 3 * 60 + 0);
         ToValueMain(vInstance1, "2.5", 2 * 3600 + 30 * 60);

         vInstance1.parserOptions.decimalCharacterMode = 2; // decimal characters treated as time separators
         ToValueMain(vInstance1, "2:03:00 AM", 2 * 3600 + 3 * 60 + 0);
         ToValueMain(vInstance1, "2.3.0 AM", 2 * 3600 + 3 * 60 + 0);

         var vInstance2 = jTAC.create("TypeManagers.TimeOfDay"); // Date object values
         assertNotNull(vInstance2);
         vInstance2.parserOptions.decimalCharacterMode = 1; // decimal values allowed
         ToValueForTimes(vInstance2, "2:03:00 AM", 2, 3, 0);
         ToValueForTimes(vInstance2, "2.5", 2, 30, 0);

         vInstance2.parserOptions.decimalCharacterMode = 2; // decimal characters treated as time separators
         ToValueForTimes(vInstance2, "2:03:00 AM", 2, 3, 0);
         ToValueForTimes(vInstance2, "2.3.0 AM", 2, 3, 0);

      }

      function testOptionTrimParts()
      {
         var vInstance1 = jTAC.create("TypeManagers.TimeOfDay");
         assertNotNull(vInstance1);
         
         ToIllegalValueMain(vInstance1, "2 :03:00 AM");
         ToIllegalValueMain(vInstance1, "2: 03:00 AM");
         ToIllegalValueMain(vInstance1, "2:03 :00 AM");
         ToIllegalValueMain(vInstance1, "2:03: 00 AM");
         ToIllegalValueMain(vInstance1, "14: 03:00");

      // create a new instance because it caches a regex that must be changed if changing trimParts
         var vInstance2 = jTAC.create("TypeManagers.TimeOfDay");
         assertNotNull(vInstance2);
         vInstance2.parserOptions.trimParts = true;
         ToValueForTimes(vInstance2, "2 :03:00 AM", 2, 3, 0);
         ToValueForTimes(vInstance2, "2: 03:00 AM", 2, 3, 0);
         ToValueForTimes(vInstance2, "2:03 :00 AM", 2, 3, 0);
         ToValueForTimes(vInstance2, "2:03: 00 AM", 2, 3, 0);
         ToValueForTimes(vInstance2, "14: 03:00", 14, 3, 0);
      }


      function testOptionMoreTimeSeps()
      {
         var vInstance1 = jTAC.create("TypeManagers.TimeOfDay");
         assertNotNull(vInstance1);
         
         ToIllegalValueMain(vInstance1, "2-03-00 AM");
         ToIllegalValueMain(vInstance1, "2+03+00 AM");

         vInstance1.parserOptions.moreTimeSeps = "-+";
         ToValueForTimes(vInstance1, "2-03-00 AM", 2, 3, 0);
         ToValueForTimes(vInstance1, "2+03+00 AM", 2, 3, 0);
      }

      function testOptionNoSecsEnforced()
      {
         var vInstance1 = jTAC.create("TypeManagers.TimeOfDay");
         assertNotNull(vInstance1);
         vInstance1.timeFormat = 1; // no seconds
         ToIllegalValueMain(vInstance1, "2:03:01 AM");
         ToIllegalValueMain(vInstance1, "2:03:01 PM");
         ToValueForTimes(vInstance1, "2:03:00 AM", 2, 3, 0);   // always allowed when seconds = 0

         vInstance1.parserOptions.noSecsEnforced = false;
         ToValueForTimes(vInstance1, "2:03:01 AM", 2, 3, 1);
         ToValueForTimes(vInstance1, "2:03:01 PM", 14, 3, 1);
         ToValueForTimes(vInstance1, "2:03:00 AM", 2, 3, 0);   // always allowed when seconds = 0
      }

      function testOptionDefaultAM()
      {
         var vInstance1 = jTAC.create("TypeManagers.TimeOfDay");
         assertNotNull(vInstance1);
         vInstance1.parseTimeRequires = "h";
         ToValueForTimes(vInstance1, "2:03:00", 2, 3, 0);
         ToValueForTimes(vInstance1, "14:03:00", 14, 3, 0);

         ToValueForTimes(vInstance1, "00", 0, 0, 0);

         vInstance1.parserOptions.defaultAM = false;
         ToValueForTimes(vInstance1, "2:03:00", 14, 3, 0); 
         ToValueForTimes(vInstance1, "14:03:00", 14, 3, 0);
         ToValueForTimes(vInstance1, "00", 12, 0, 0);

         vInstance1.parserOptions.defaultAM = null;   // 12 hour pattern requires AM/PM, except when hours explicitly mean PM (above 12).
         ToIllegalValueMain(vInstance1, "2:03:00"); 
         ToValueForTimes(vInstance1, "14:03:00", 14, 3, 0);
      }

      function testOptionInsertTimeSeps()
      {
         var vInstance1 = jTAC.create("TypeManagers.TimeOfDay");
         assertNotNull(vInstance1);
         ToValueForTimes(vInstance1, "20300", 2, 3, 0);
         ToValueForTimes(vInstance1, "140300", 14, 3, 0);
         ToValueForTimes(vInstance1, "1000", 10, 0, 0);
         ToValueForTimes(vInstance1, "20300 PM", 14, 3, 0);

         vInstance1.parserOptions.insertTimeSeps = false;
         ToIllegalValueMain(vInstance1, "20300");
         ToIllegalValueMain(vInstance1, "140300");
         ToIllegalValueMain(vInstance1, "1000");
         ToIllegalValueMain(vInstance1, "20300 PM", 14, 3, 0);
      }


      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testToValue();
         testToValueFrench();
         testToValueHindi();
         testToValueEcuador();
         testToValueEthiopia();
         testToValueAsNumber();
         testToValueDecimalCharacterMode();
         testOptionTrimParts();
         testOptionMoreTimeSeps();
         testOptionNoSecsEnforced();
         testOptionDefaultAM();
         testOptionInsertTimeSeps();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }
   </script>

</body>
</html>
