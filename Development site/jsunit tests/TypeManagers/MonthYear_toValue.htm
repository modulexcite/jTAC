<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseCulture.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseDatesAndTimes.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseDate.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/MonthYear.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.fr-FR.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.en-US.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.hi-IN.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.ii-CN.js" type="text/javascript"></script>  
   <script src="../../jquery-globalize/cultures/globalize.culture.quz-EC.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/cultures/globalize.culture.am-ET.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Culture%20engine%20using%20jquery-globalize.js" type="text/javascript"></script>
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.

      function severalDates(instance, pattern)
      {
         var dtfi = instance._culture().calendars.standard;
         pattern = pattern.replace(/'/g, "");
         // reminder: day of month is ignored here
         var date1 = new Date(2012, 0, 1);
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date1), date1);
         var date2 = new Date(2005, 11, 1);
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date2), date2);
         var date3 = new Date(1980, 7, 1);
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date3), date3);
         var date4 = new Date(1965, 4, 1);
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date4), date4);
         var date5 = new Date(2100, 1, 1);
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date5), date5);
         var date6 = new Date(2000, 8, 1);
         ToValueForDates(instance, UpdatePatternWithDate(instance, pattern, date6), date6);
      }
      function testToValue()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear"); 
         assertNotNull(vInstance1);
         severalDates(vInstance1, "M/yyyy");

         ToValueForDates(vInstance1, "1/20", new Date(2020, 0, 1));
         vInstance1.twoDigitYear = false;
         ToIllegalValueMain(vInstance1, "1/20");
         vInstance1.twoDigitYear = true;

         ToIllegalValueMain(vInstance1, "21/1900");
         ToIllegalValueMain(vInstance1, "1/19000");
         ToIllegalValueMain(vInstance1, "1/");
         ToIllegalValueMain(vInstance1, "/1/20");
         ToIllegalValueMain(vInstance1, "/");
         ToIllegalValueMain(vInstance1, "//");
         ToIllegalValueMain(vInstance1, "1 /1900");
         ToIllegalValueMain(vInstance1, "1/ 1900");
         ToIllegalValueMain(vInstance1, "Jan/1900");
         assertNull(vInstance1.toValue(""));
/* CANNOT PARSE THESE WITH THE DEFAULT PARSER. REQUIRES ANOTHER PARSER

         vInstance1.setDateFormat(1);
         severalDates(vInstance1, "MMM/yyyy");
         ToValueForDates(vInstance1, "FEB/2000", new Date(2000, 1, 1));
         ToIllegalValueMain(vInstance1, "J/1900");

         ToIllegalValueMain(vInstance1, "Ja/1900");
         ToIllegalValueMain(vInstance1, "January/1900");
         ToIllegalValueMain(vInstance1, "Jank/1900");
         ToIllegalValueMain(vInstance1, "Feb/19000");

         ToIllegalValueMain(vInstance1, "Mar/2000/");
         ToIllegalValueMain(vInstance1, "Apr/20");
         ToIllegalValueMain(vInstance1, "/1/2000");
         ToIllegalValueMain(vInstance1, "/");
         ToIllegalValueMain(vInstance1, "//");
         ToIllegalValueMain(vInstance1, "May /1900");  // may become legal in a later release
         ToIllegalValueMain(vInstance1, "May/ 1900");  // may become legal in a later release

         vInstance1.setDateFormat(2);
         severalDates(vInstance1, "MMM/yyyy");   // same as 1.
         ToValueForDates(vInstance1, "FEB/2000", new Date(2000, 1, 1));
         ToValueForDates(vInstance1, "feb/2000", new Date(2000, 1, 1));

         vInstance1.setDateFormat(10);
         severalDates(vInstance1, "yyyy MMM");
         ToValueForDates(vInstance1, "2000 feb", new Date(2000, 1, 1));
         ToValueForDates(vInstance1, "2000 FEB", new Date(2000, 1, 1));
         ToValueForDates(vInstance1, "2000      FEB", new Date(2000, 1, 1));

         ToIllegalValueMain(vInstance1, "Feb 2000");
         ToIllegalValueMain(vInstance1, "1900 J");
         ToIllegalValueMain(vInstance1, "1900 Ja");
         ToIllegalValueMain(vInstance1, "1900 January");
         ToIllegalValueMain(vInstance1, "1900 Jank");
         ToIllegalValueMain(vInstance1, "19000 Jan");
         ToIllegalValueMain(vInstance1, "1900, Jan");

         ToIllegalValueMain(vInstance1, "20 Apr");
         ToIllegalValueMain(vInstance1, "1, 2000");
         ToIllegalValueMain(vInstance1, "2000 1");
         ToIllegalValueMain(vInstance1, "2000, 1");
         ToIllegalValueMain(vInstance1, "April");
         ToIllegalValueMain(vInstance1, "20");
         ToIllegalValueMain(vInstance1, "2000");

         ToIllegalValueMain(vInstance1, "2/2000");

         vInstance1.setDateFormat(20);
         severalDates(vInstance1, "yyyy MMMM");
         ToValueForDates(vInstance1, "2000 february", new Date(2000, 1, 1));
         ToValueForDates(vInstance1, "2000 FEBRUARY", new Date(2000, 1, 1));
         ToValueForDates(vInstance1, "2000      FEBRUARY", new Date(2000, 1, 1));

         ToIllegalValueMain(vInstance1, "February 2000");
         ToIllegalValueMain(vInstance1, "1900 J");
         ToIllegalValueMain(vInstance1, "1900 Ja");
         ToIllegalValueMain(vInstance1, "1900 Jan");
         ToIllegalValueMain(vInstance1, "1900 Februaryk");
         ToIllegalValueMain(vInstance1, "19000 February");
         ToIllegalValueMain(vInstance1, "1900, February");

         ToIllegalValueMain(vInstance1, "20 April");
         ToIllegalValueMain(vInstance1, "1, 2000");
         ToIllegalValueMain(vInstance1, "2000 1");
         ToIllegalValueMain(vInstance1, "2000, 1");
         ToIllegalValueMain(vInstance1, "April");
         ToIllegalValueMain(vInstance1, "20");
         ToIllegalValueMain(vInstance1, "2000");

         ToIllegalValueMain(vInstance1, "2/2000");
*/
         vInstance1.dateFormat = 100;
         severalDates(vInstance1, "yyyy-MM");

      }

      function testToValueFrench()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear", {cultureName: "fr-FR"}); 
         assertNotNull(vInstance1);
         severalDates(vInstance1, "MM/yyyy");

/* CANNOT PARSE THESE WITH THE DEFAULT PARSER. REQUIRES ANOTHER PARSER

         vInstance1.setDateFormat(1);
         severalDates(vInstance1, "MMM/yyyy");

         vInstance1.setDateFormat(2);
         severalDates(vInstance1, "MMM/yyyy");   // same as 1.

         vInstance1.setDateFormat(10);
         severalDates(vInstance1, "MMM yyyy");

         vInstance1.setDateFormat(20);
         severalDates(vInstance1, "MMMM yyyy");
*/
      }

      function testToValueHindi()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear", {cultureName: "hi-IN"}); 
         assertNotNull(vInstance1);
         severalDates(vInstance1, "MM-yyyy");

/* CANNOT PARSE THESE WITH THE DEFAULT PARSER. REQUIRES ANOTHER PARSER
         vInstance1.setDateFormat(1);
         severalDates(vInstance1, "MMM-yyyy");

         vInstance1.setDateFormat(2);
         severalDates(vInstance1, "MMM-yyyy");   // same as 1.

         vInstance1.setDateFormat(10);
         severalDates(vInstance1, "yyyy MMM");

         vInstance1.setDateFormat(20);
         severalDates(vInstance1, "yyyy MMMM");
*/
      }

      function testToValueChinese()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear", {cultureName: "ii-CN"}); 
         assertNotNull(vInstance1);
         severalDates(vInstance1, "yyyy/M");

/* CANNOT PARSE THESE WITH THE DEFAULT PARSER. REQUIRES ANOTHER PARSER
         vInstance1.setDateFormat(1);
         severalDates(vInstance1, "yyyy/MMM");

         vInstance1.setDateFormat(2);
         severalDates(vInstance1, "yyyy/MMM");   // same as 1.

         // chinese uses the month number, not name
         vInstance1.setDateFormat(10);
         severalDates(vInstance1, "yyyy'ꈎ' M'ꆪ'");

         vInstance1.setDateFormat(20);
         severalDates(vInstance1, "yyyy'ꈎ' M'ꆪ'");
*/
      }

      function testToValueEcuador()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear", {cultureName: "quz-EC"}); 
         assertNotNull(vInstance1);
         severalDates(vInstance1, "MM/yyyy");

/* CANNOT PARSE THESE WITH THE DEFAULT PARSER. REQUIRES ANOTHER PARSER
         vInstance1.setDateFormat(1);
         severalDates(vInstance1, "MMM/yyyy");

         vInstance1.setDateFormat(2);
         severalDates(vInstance1, "MMM/yyyy");   // same as 1.

         vInstance1.setDateFormat(10);
         ToValueForDates(vInstance1, "Qul de 2000", new Date(2000, 0, 1));

         vInstance1.setDateFormat(20);
         ToValueForDates(vInstance1, "Qulla puquy de 2000", new Date(2000, 0, 1));
*/
      }

      function testToValueEthiopia()
      {
         var vInstance1 = jTAC.create("TypeManagers.MonthYear", {cultureName: "am-ET"}); 
         assertNotNull(vInstance1);
         severalDates(vInstance1, "M/yyyy");

/* CANNOT PARSE THESE WITH THE DEFAULT PARSER. REQUIRES ANOTHER PARSER
         vInstance1.setDateFormat(1);
         severalDates(vInstance1, "MMM/yyyy");

         vInstance1.setDateFormat(2);
         severalDates(vInstance1, "MMM/yyyy");   // same as 1.

         vInstance1.setDateFormat(10);
         severalDates(vInstance1, "MMM yyyy");

         vInstance1.setDateFormat(20);
         severalDates(vInstance1, "MMMM yyyy");
*/
      }

      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testToValue();
         testToValueFrench();
         testToValueHindi();
         testToValueChinese();
         testToValueEcuador();
         testToValueEthiopia();

      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }
   </script>

</head>
<body>

</body>
</html>
