<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/BaseElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/FormElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/InnerHtml.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseCulture.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseNumber.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseFloat.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Integer.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Float.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Currency.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Percent.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseOneConnection.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/Range.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/NaN.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Null.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Number.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Element.js" type="text/javascript"></script>
   <script src="../../jTAC/CalcItems/Group.js" type="text/javascript"></script>
   <script src="../../jTAC/Calculations/Widget.js" type="text/javascript"></script>
   <script src="../../jTAC/Calculations/WidgetConnection.js" type="text/javascript"></script>

</head>
<body>
   <form action="" method="get" id="Form1">
      <input type='hidden' id="hidden1" name="hidden1" />
      <input type='hidden' id="hidden2" name="hidden2" />
      <input type='hidden' id="hidden3" name="hidden3" />
     
      <span id="Result1" ></span>
      <span id="Result2" ></span>

      <input type='text' id="TextBox1" name="TextBox1" />
      <input type='text' id="TextBox2" name="TextBox2" />
   </form>

   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.
      function testAllProperties()
      {
         var vInstance1 = jTAC.create("Calculations.Widget");
         assertNotNull(vInstance1);
         assertFalse(vInstance1.canEvaluate());
         assertNull(vInstance1.elementId);
         assertNotNull(vInstance1.calcItem);
         assertTrue(vInstance1.calcItem instanceof jTAC.CalcItems.Group);

         assertNull(vInstance1.displayConnection);
         assertNull(vInstance1.displayElementId);

         assertNull(vInstance1.displayDatatype);   // before getting displayTypeManager, this is null
         assertNotNull(vInstance1.displayTypeManager);   // when null, it creates jTAC.TypeManagers.Float
         assertTrue(vInstance1.displayTypeManager instanceof jTAC.TypeManagers.Float); 
         assertEquals("float", vInstance1.displayDatatype); // changed to "float"

         assertEquals("calcwidget-error", vInstance1.displayErrorClass);
         assertEquals("***", vInstance1.displayErrorText);

         assertEquals("calcwidget-null", vInstance1.displayNullClass);
         assertEquals("", vInstance1.displayNullText);

         assertTrue(vInstance1.useChangeEvt);
         assertFalse(vInstance1.useKeyEvt);

   // change properties from defaults
         vInstance1.elementId = "hidden1";
         assertEquals("hidden1", vInstance1.elementId);

         var ci = jTAC.create("CalcItems.Number", {number: 10});
         vInstance1.calcItem = ci;
         assertNotNull(vInstance1.calcItem);
         assertTrue(vInstance1.calcItem instanceof jTAC.CalcItems.Number);
         assertEquals(10, vInstance1.calcItem.number);
         assertEquals(10, vInstance1.calcItem.evaluate());

         var json = { "jtacClass": "CalcItems.Element", "elementId": "TextBox1" };
         vInstance1.calcItem = json;
         assertNotNull(vInstance1.calcItem);
         assertTrue(vInstance1.calcItem instanceof jTAC.CalcItems.Element);
         assertEquals("TextBox1", vInstance1.calcItem.elementId);
         vInstance1.calcItem.connection.setTextValue("100");
         assertTrue(vInstance1.calcItem.canEvaluate());
         assertEquals(100, vInstance1.calcItem.evaluate());

         vInstance1.calcItem =  []; // will be converted to jTAC.CalcItems.Group
         assertNotNull(vInstance1.calcItem);
         assertTrue(vInstance1.calcItem instanceof jTAC.CalcItems.Group);

         vInstance1.displayElementId = "TextBox2";
         assertEquals("TextBox2", vInstance1.displayElementId);
         assertNotNull(vInstance1.displayConnection);
         assertTrue(vInstance1.displayConnection instanceof jTAC.Connections.FormElement);
         assertEquals("TextBox2", vInstance1.displayConnection.id);

         var conn = jTAC.create("Connections.InnerHtml", {id: "Result1"});
         vInstance1.displayConnection = conn;
         assertTrue(vInstance1.displayConnection instanceof jTAC.Connections.InnerHtml);
         assertEquals("Result1", vInstance1.displayConnection.id);

         // typemanagers. Currently have the default, jTAC.TypeManagers.Float
         vInstance1.displayDatatype = "Currency";
         assertEquals("currency", vInstance1.displayDatatype);
         assertTrue(vInstance1.displayTypeManager instanceof jTAC.TypeManagers.Currency);

         json = { "jtacClass": "Percent", "showPercentSymbol": true };
         vInstance1.displayTypeManager = json;
         assertEquals("percent", vInstance1.displayDatatype);
         assertTrue(vInstance1.displayTypeManager instanceof jTAC.TypeManagers.Percent);
         assertTrue(vInstance1.displayTypeManager.showPercentSymbol);

         vInstance1.displayTypeManager = jTAC.create("TypeManagers.Float");
         assertEquals("float", vInstance1.displayDatatype);
         assertTrue(vInstance1.displayTypeManager instanceof jTAC.TypeManagers.Float);

         vInstance1.displayErrorClass = "abc";
         assertEquals("abc", vInstance1.displayErrorClass);
         vInstance1.displayErrorText = "123";
         assertEquals("123", vInstance1.displayErrorText);

         vInstance1.displayNullClass = "jkl";
         assertEquals("jkl", vInstance1.displayNullClass);
         vInstance1.displayNullText = "hi";
         assertEquals("hi", vInstance1.displayNullText);

         vInstance1.useChangeEvt = false;
         assertFalse(vInstance1.useChangeEvt);
         vInstance1.useKeyEvt = true;
         assertTrue(vInstance1.useKeyEvt);
      }

      function testSimpleCalc()
      {
         document.getElementById("hidden2").value = "";
         var vInstance1 = jTAC.create("Calculations.Widget");
         assertNotNull(vInstance1);

         var success = true;
         try
         {
            vInstance1.evaluate();  // should fail with elementId unassigned
            success = false;
         }
         catch (e)
         {
            if (e.message.indexOf("Must assign the elementId property.") == -1)
               fail(e.message);
         }
         if (!success)
            fail("evaluated when it shouldn't.");

         vInstance1.elementId = "hidden2";
         vInstance1.calcItem = jTAC.create("CalcItems.Number", {number: 100});

         assertTrue(vInstance1.canEvaluate());
         assertEquals(100, vInstance1.evaluate());

         assertEquals("100", document.getElementById("hidden2").value);
      }

      function testSimpleCalc2()
      {
         document.getElementById("hidden2").value = "";
         var vInstance1 = jTAC.create("Calculations.Widget");
         assertNotNull(vInstance1);
         vInstance1.elementId = "hidden2";
         // uses default calcItem, GroupCalcItem
         vInstance1.calcItem.addItem(jTAC.create("CalcItems.Number", {number: 10}));
         vInstance1.calcItem.addItem(jTAC.create("CalcItems.Number", {number: 15}));
         assertTrue(vInstance1.canEvaluate());
         assertEquals(25, vInstance1.evaluate());
         assertEquals("25", document.getElementById("hidden2").value);
      }

      function testDisplayToFloatTextBox()
      {
         var hd1 = document.getElementById("hidden1");
         hd1.value = "";
         var tb1 = document.getElementById("TextBox1");
         tb1.value = "";
         var vInstance1 = jTAC.create("Calculations.Widget");
         assertNotNull(vInstance1);
         vInstance1.elementId = "hidden1";
         vInstance1.displayElementId = "TextBox1";
         assertEquals("", vInstance1.displayConnection.getClass());

      // Test null value
         vInstance1.calcItem = jTAC.create("CalcItems.Null");
         assertTrue(vInstance1.canEvaluate());
         assertNull(vInstance1.evaluate());
         assertEquals("", hd1.value);
         assertEquals("", vInstance1.displayConnection.getTextValue());
         assertEquals("calcwidget-null", vInstance1.displayConnection.getClass());
         vInstance1.displayNullText = "Blank";
         assertNull(vInstance1.evaluate());  // recalc to update the displayvalue
         assertEquals("", hd1.value);
         assertEquals("Blank", vInstance1.displayConnection.getTextValue());
         assertEquals("calcwidget-null", vInstance1.displayConnection.getClass());


         // add to GroupCalcItem to show an actual value
         vInstance1.calcItem = jTAC.create("CalcItems.Group");
         vInstance1.calcItem.addItem(jTAC.create("CalcItems.Number", {number: 10}));
         vInstance1.calcItem.addItem(jTAC.create("CalcItems.Number", {number: 15}));
         assertTrue(vInstance1.canEvaluate());
         assertEquals(25, vInstance1.evaluate());
         assertEquals("25", hd1.value);
         var val = vInstance1.displayTypeManager.toValueFromConnection(vInstance1.displayConnection);
         assertEquals(25.0, val);
         assertEquals("", vInstance1.displayConnection.getClass());

         // use Error case
         vInstance1.calcItem = jTAC.create("CalcItems.NaN");
         assertTrue(vInstance1.canEvaluate());
         assertNaN(vInstance1.evaluate());
         assertEquals("NaN", hd1.value);
         assertEquals("calcwidget-error", vInstance1.displayConnection.getClass());
      }

      function testMissingHidden()
      {
         var vInstance1 = jTAC.create("Calculations.Widget");
         assertNotNull(vInstance1);
         vInstance1.elementId = "MissingHidden";
         // uses default calcItem, GroupCalcItem
         vInstance1.calcItem.addItem(jTAC.create("CalcItems.Number", {number: 10}));
         vInstance1.calcItem.addItem(jTAC.create("CalcItems.Number", {number: 15}));
         assertTrue(vInstance1.canEvaluate());
         assertEquals(25, vInstance1.evaluate());
         assertEquals("25", document.getElementById("MissingHidden").value);
      }

      function testPrePostCalcFunctions()
      {
         var widgetfield = document.getElementById("hidden1");
         widgetfield.value = "";
         var precalcfncdata = document.getElementById("hidden2");  // will contain the work of precalc
         precalcfncdata.value = ""; 
         var postcalcfncdata = document.getElementById("hidden3");  // will contain the work of postcalc
         postcalcfncdata.value = ""; 
         var vInstance1 = jTAC.create("Calculations.Widget");
         assertNotNull(vInstance1);
         vInstance1.elementId = "hidden1";
         // uses default calcItem, GroupCalcItem
         vInstance1.calcItem.addItem(jTAC.create("CalcItems.Number", {number: 10}));
         vInstance1.calcItem.addItem(jTAC.create("CalcItems.Number", {number: 15}));

         var f1 = function () //assigned here to be reused in later detachEvent
         {
            precalcfncdata.value = this.elementId; // confirms 'this' is the widget
         }
         vInstance1.attachEvent("preCalc", f1);

         var f2 = function (val)
         {
            postcalcfncdata.value = this.elementId + " " + val; // confirms 'this' is the widget
         }
         vInstance1.attachEvent("postCalc", f2);

         assertTrue(vInstance1.canEvaluate());
         assertEquals(25, vInstance1.evaluate());
         assertEquals("25", widgetfield.value);

         // check function results in hidden2/3
         assertEquals("hidden1", precalcfncdata.value);
         assertEquals("hidden1 25", postcalcfncdata.value);

// do it again, but make preCalc return false so the rest of the calc is not run and evaluate returns null.
         precalcfncdata.value = ""; 
         postcalcfncdata.value = "";

         vInstance1.detachEvent("preCalc", f1);

         vInstance1.attachEvent("preCalc", function ()
         {
            precalcfncdata.value = this.elementId; 
         });

         vInstance1.attachEvent("preCalc", function ()
         {
            precalcfncdata.value = precalcfncdata.value + " second";
            return false;  // will stop the third event from happening as well as the remaining calculation
         });

         vInstance1.attachEvent("preCalc", function ()
         {
            precalcfncdata.value = precalcfncdata.value + " third"; 
         });

         assertTrue(vInstance1.canEvaluate());
         assertNull(vInstance1.evaluate());
         assertEquals("25", widgetfield.value); // it has not overwritten the originally stored value

         // check function results in hidden2/3
         assertEquals("hidden1 second", precalcfncdata.value);
         assertEquals("", postcalcfncdata.value);
      
      }



      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testAllProperties();
         testSimpleCalc();
         testSimpleCalc2();
         testDisplayToFloatTextBox();
         testMissingHidden();
         testPrePostCalcFunctions();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>

</body>
</html>
