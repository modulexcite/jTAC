<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/Merged/core.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/Merged/typemanagers-numbers.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/Merged/typemanagers-date-time-all.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/Merged/conditions-typical.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/Connections/Value.js" type="text/javascript"></script>
</head>
<body>
   <input id="textBox1" type="text" />
   <input id="textBox2" type="text" />
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.
      function testAllProperties()
      {
         var cond = jTAC.create("Conditions.CompareTwoElements");
         assertNotNull(cond);
         assertNotNull(cond.typeManager); // while not assigned before, it uses the default of TypeManagers.Integer
         assertTrue(cond.typeManager instanceof jTAC.TypeManagers.Integer);
         assertTrue(cond.enabled);
         assertTrue(cond.trim);
         assertNull(cond.lastEvaluateResult);
         assertFalse(cond.not);
         assertNotNull(cond.connection);
         assertTrue(cond.connection instanceof jTAC.Connections.FormElement);
         assertNotNull(cond.connection2);
         assertTrue(cond.connection2 instanceof jTAC.Connections.FormElement);
         assertEquals("=", cond.operator);
         assertTrue(cond.canEvaluate());

         cond.operator = "<>";
         assertEquals("<>", cond.operator);


         cond.typeManager = jTAC.create("Float");
         assertTrue(cond.typeManager instanceof jTAC.TypeManagers.Float);

         cond.enabled = false;
         assertFalse(cond.enabled);
         assertFalse(cond.canEvaluate());

         assertTrue(cond.connection.trim);
         cond.trim = false;
         assertFalse(cond.trim);
         assertFalse(cond.connection.trim);

         cond.not = true;
         assertTrue(cond.not);
      }

      function testInteger()
      {
         var tm = jTAC.create("Integer");
         RunCompareTwoElements(tm, "1", "0", ">", 1);
         RunCompareTwoElements(tm, "1", "0", "<", 0);
         RunCompareTwoElements(tm, "1", "0", ">=", 1);
         RunCompareTwoElements(tm, "1", "0", "<=", 0);
         RunCompareTwoElements(tm, "1", "0", "<>", 1);
         RunCompareTwoElements(tm, "1", "0", "=", 0);

         RunCompareTwoElements(tm, "1", "1", ">", 0);
         RunCompareTwoElements(tm, "1", "1", "<", 0);
         RunCompareTwoElements(tm, "1", "1", ">=", 1);
         RunCompareTwoElements(tm, "1", "1", "<=", 1);
         RunCompareTwoElements(tm, "1", "1", "<>", 0);
         RunCompareTwoElements(tm, "1", "1", "=", 1);

         RunCompareTwoElements(tm, "1", "2", ">", 0);
         RunCompareTwoElements(tm, "1", "2", "<", 1);
         RunCompareTwoElements(tm, "1", "2", ">=", 0);
         RunCompareTwoElements(tm, "1", "2", "<=", 1);
         RunCompareTwoElements(tm, "1", "2", "<>", 1);
         RunCompareTwoElements(tm, "1", "2", "=", 0);

         RunCompareTwoElements(tm, "1", "1", "=", 0, { "not": true });
         RunCompareTwoElements(tm, "1", "1", "<>", 1, { "not": true });


         RunCompareTwoElements(tm, "", "1", "=", -1);
         RunCompareTwoElements(tm, "", "1", "=", -1, { "not" : true }); // not should not change the result of -1

      }

      function testFloat()
      {
         var tm = jTAC.create("Float");
         RunCompareTwoElements(tm, "1.0", "0", ">", 1);
         RunCompareTwoElements(tm, "1.0", "0", "<", 0);
         RunCompareTwoElements(tm, "1.0", "0", ">=", 1);
         RunCompareTwoElements(tm, "1.0", "0", "<=", 0);
         RunCompareTwoElements(tm, "1.0", "0", "<>", 1);
         RunCompareTwoElements(tm, "1.0", "0", "=", 0);

         RunCompareTwoElements(tm, "1.5", "1.5", "<", 0);
         RunCompareTwoElements(tm, "1.5", "1.5", ">", 0);
         RunCompareTwoElements(tm, "1.5", "1.5", ">=", 1);
         RunCompareTwoElements(tm, "1.5", "1.5", "<=", 1);
         RunCompareTwoElements(tm, "1.5", "1.5", "<>", 0);
         RunCompareTwoElements(tm, "1.5", "1.5", "=", 1);

         RunCompareTwoElements(tm, "1.5", "1.6", ">", 0);
         RunCompareTwoElements(tm, "1.5", "1.6", "<", 1);
         RunCompareTwoElements(tm, "1.5", "1.6", ">=", 0);
         RunCompareTwoElements(tm, "1.5", "1.6", "<=", 1);
         RunCompareTwoElements(tm, "1.5", "1.6", "<>", 1);
         RunCompareTwoElements(tm, "1.5", "1.6", "=", 0);

         RunCompareTwoElements(tm, "1.2", "1.2", "=", 0, { "not": true });
         RunCompareTwoElements(tm, "1.2", "1.2", "<>", 1, { "not": true });


         RunCompareTwoElements(tm, "", "1.2", "=", -1);
         RunCompareTwoElements(tm, "", "1.2", "=", -1, { "not" : true }); // not should not change the result of -1

      }

      function testDate()
      {
         var tm = jTAC.create("Date");
         RunCompareTwoElements(tm, "1/20/2012", "1/1/2012", ">", 1);
         RunCompareTwoElements(tm, "1/20/2012", "1/1/2012", ">=", 1);
         RunCompareTwoElements(tm, "1/20/2012", "1/1/2012", "<", 0);
         RunCompareTwoElements(tm, "1/20/2012", "1/1/2012", "<=", 0);
         RunCompareTwoElements(tm, "1/20/2012", "1/1/2012", "=", 0);
         RunCompareTwoElements(tm, "1/20/2012", "1/1/2012", "<>", 1);

         RunCompareTwoElements(tm, "1/1/2012", "1/1/2012", "=", 1);

         RunCompareTwoElements(tm, "1/20/2012", "1/1/2012", "=", 1, { "not" : true });

      }

      function testTimeOfDay()
      {
         var tm = jTAC.create("TimeOfDay");
         RunCompareTwoElements(tm, "1:30:00 AM", "1:00:00 AM", ">", 1);
         RunCompareTwoElements(tm, "1:30:00 AM", "1:00:00 AM", ">=", 1);
         RunCompareTwoElements(tm, "1:30:00 AM", "1:00:00 AM", "<", 0);
         RunCompareTwoElements(tm, "1:30:00 AM", "1:00:00 AM", "<=", 0);
         RunCompareTwoElements(tm, "1:30:00 AM", "1:00:00 AM", "=", 0);
         RunCompareTwoElements(tm, "1:30:00 AM", "1:00:00 AM", "<>", 1);

         RunCompareTwoElements(tm, "1:00:00 AM", "1:00:00 AM", "=", 1);
      }

      function testDuration()
      {
         var tm = jTAC.create("Duration.InSeconds"); // valueAsNumber representing seconds
         var valueToCompare = 5 * 3600;
         RunCompareTwoElements(tm, "4:30:00", "5:00:00", "<", 1);
         RunCompareTwoElements(tm, "4:30:00", "5:00:00", "<=", 1);
         RunCompareTwoElements(tm, "4:30:00", "5:00:00", ">", 0);
         RunCompareTwoElements(tm, "4:30:00", "5:00:00", ">=", 0);
         RunCompareTwoElements(tm, "4:30:00", "5:00:00", "=", 0);
         RunCompareTwoElements(tm, "4:30:00", "5:00:00", "<>", 1);

         RunCompareTwoElements(tm, "5:0:00", "5:00:00", "=", 1);
      }


      function RunCompareTwoElements(typeManager, textForConnection1, textForConnection2, operator, expectedResult, json)
      {
         var vInstance1 = jTAC.create("CompareTwoElements");
         assertNotNull(vInstance1);
         vInstance1.typeManager = typeManager;
         vInstance1.elementId = "textBox1";
         vInstance1.connection.setTextValue(textForConnection1); // trick to use existing objects to write to the textbox
         vInstance1.elementId2 = "textBox2";
         vInstance1.connection2.setTextValue(textForConnection2); // trick to use existing objects to write to the textbox

         vInstance1.operator = operator;

         if (json != null)
            vInstance1.setProperties(json);

//         assertTrue(vInstance1.canEvaluate());
         var evalResult = vInstance1.evaluate();
         assertEquals("Eval result incorrect. Expected: " + expectedResult + " Recieved: " + evalResult, expectedResult, evalResult);

         vInstance1.connection.setTextValue(""); // reset the textbox
      }

      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testAllProperties();
         testInteger();
         testFloat();
         testDate();
         testTimeOfDay();
         testDuration();

      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>


</body>
</html>
