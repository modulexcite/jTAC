<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/Merged/core.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/Merged/typemanagers-numbers.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/Merged/typemanagers-date-time-all.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/Merged/conditions-basic.js" type="text/javascript"></script>
   <script src="../../../jTAC-min/Connections/Value.js" type="text/javascript"></script>
</head>
<body>
   <input id="textBox1" type="text" />
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.
      function testAllProperties()
      {
         var cond = jTAC.create("Conditions.DataTypeCheck")
         assertNotNull(cond);
         assertNotNull(cond.typeManager); // while not assigned before, it uses the default of TypeManagers.Integer
         assertTrue(cond.typeManager instanceof jTAC.TypeManagers.Integer);
         assertTrue(cond.typeManager.instanceOf("TypeManagers.Integer"));
         assertTrue(cond.enabled);
         assertTrue(cond.trim);
         assertNull(cond.lastEvaluateResult);
         assertFalse(cond.not);
         assertNotNull(cond.connection);
         assertTrue(cond.connection.instanceOf("Connections.FormElement"));
         assertTrue(cond.canEvaluate());

         cond.typeManager = jTAC.create("TypeManagers.Float");
         assertTrue(cond.typeManager instanceof jTAC.TypeManagers.Float);

         cond.enabled = false;
         assertFalse(cond.enabled);
         assertFalse(cond.canEvaluate());

         assertTrue(cond.connection.trim);
         cond.trim = false;
         assertFalse(cond.trim);
         assertFalse(cond.connection.trim);

         cond.not = true;
         assertTrue(cond.not);
         cond.connection = jTAC.create("Connections.Value", {value: 100});
         assertNotNull(cond.connection);
         assertTrue(cond.connection.instanceOf("Connections.Value"));
         assertEquals(100, cond.connection.value);
      }

      function testIntegerSuccess()
      {
         var tm = jTAC.create("Integer");
         RunDataTypeCheck(tm, "1", 1);
         RunDataTypeCheck(tm, "1,000", 1);

         RunDataTypeCheck(null, "1", 1);  // when typemanager is null, it should use the default, TypeManagers.Integer
         RunDataTypeCheck(null, "1,000", 1);

         RunDataTypeCheck(tm, "1", 0, { "not" : true });
         RunDataTypeCheck(tm, "1,000", 0, { "not" : true });

      }

      function testIntegerFailed()
      {
         var tm = jTAC.create("Integer");
         RunDataTypeCheck(tm, "abc", 0);
         RunDataTypeCheck(tm, "1,000.2", 0);

         RunDataTypeCheck(null, "1", 1);  // when typemanager is null, it should use the default, TypeManagers.Integer
         RunDataTypeCheck(null, "abc", 0);

         RunDataTypeCheck(tm, "abc", 1, { "not" : true });
         RunDataTypeCheck(tm, "1,000.2", 1, { "not" : true });
      }

      function testIntegerCannotEval()
      {
         var tm = new jTAC.create("Integer");
         RunDataTypeCheck(tm, "", -1);

         RunDataTypeCheck(null, "", -1);  // when typemanager is null, it should use the default, TypeManagers.Integer

         RunDataTypeCheck(tm, "", -1, { "not" : true }); // not should not change the result of -1
      }

      function testDateSuccess()
      {
         var tm = jTAC.create("Date");
         RunDataTypeCheck(tm, "1/20/2012", 1);
/* Requires a more advance parser like PowerDateParser
         tm.dateFormat = 10;
         RunDataTypeCheck(tm, "1/20", 1);
         RunDataTypeCheck(tm, "Jan 20, 2012", 1);
*/
         RunDataTypeCheck(tm, "1/20/2012", 0, { "not" : true });

      }

      function testDateFailed()
      {
         var tm = jTAC.create("Date");
         RunDataTypeCheck(tm, "abc", 0);
         RunDataTypeCheck(tm, "1,000.2", 0);
         RunDataTypeCheck(tm, "1", 0);
         RunDataTypeCheck(tm, "99/99/2012", 0);

         RunDataTypeCheck(tm, "abc", 1, { "not" : true });
      }

      function testTimeOfDaySuccess()
      {
         var tm = jTAC.create("TimeOfDay");
         RunDataTypeCheck(tm, "1:30:00 AM", 1);
         tm.timeFormat = 2;
         RunDataTypeCheck(tm, "1:30 AM", 1);
         RunDataTypeCheck(tm, "2:40:10 AM", 1);
         RunDataTypeCheck(tm, "1", 1);

         RunDataTypeCheck(tm, "1:30:10 AM", 0, { "not" : true });

      }

      function testTimeOfDayFailed()
      {
         var tm = jTAC.create("TimeOfDay");
         RunDataTypeCheck(tm, "abc", 0);
         RunDataTypeCheck(tm, "1,000.2", 0);

         RunDataTypeCheck(tm, "abc", 1, { "not" : true });
      }

      function testDurationSuccess()
      {
         var tm = jTAC.create("Duration");
         RunDataTypeCheck(tm, "14:30:00", 1);
         tm.timeFormat = 12;
         RunDataTypeCheck(tm, "23:30", 1);
         RunDataTypeCheck(tm, "2:40:10", 1);
         RunDataTypeCheck(tm, "1", 1);

         RunDataTypeCheck(tm, "1:30:10", 0, { "not" : true });

      }

      function testDurationFailed()
      {
         var tm = jTAC.create("Duration");
         RunDataTypeCheck(tm, "abc", 0);
         RunDataTypeCheck(tm, "1,000.2", 0);

         RunDataTypeCheck(tm, "abc", 1, { "not" : true });
      }


      function RunDataTypeCheck(typeManager, textToCompare, expectedResult, json)
      {
         var vInstance1 = jTAC.create("Conditions.DataTypeCheck");
         assertNotNull(vInstance1);
         vInstance1.typeManager = typeManager;
         vInstance1.elementId = "textBox1";
         vInstance1.connection.setTextValue(textToCompare); // trick to use existing objects to write to the textbox

         if (json != null)
            vInstance1.setProperties(json);

         assertTrue(vInstance1.canEvaluate());
         var evalResult = vInstance1.evaluate();
         assertEquals("Eval result incorrect. Expected: " + expectedResult + " Recieved: " + evalResult, expectedResult, evalResult);

         vInstance1.connection.setTextValue(""); // reset the textbox
      }

      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testAllProperties();
         testIntegerSuccess();
         testIntegerFailed();
         testIntegerCannotEval();
         testDateSuccess();
         testDateFailed();
         testTimeOfDaySuccess();
         testTimeOfDayFailed();
         testDurationSuccess();
         testDurationFailed();

      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>


</body>
</html>
