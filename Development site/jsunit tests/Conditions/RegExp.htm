<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/BaseElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/FormElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseOneConnection.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseRegExp.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/RegExp.js" type="text/javascript"></script>
</head>
<body>
   <form action="RegExpCondition.htm" method="post" >
      <input id="textBox1" type="text" />
      <input type="submit" value="Submit" />
   </form>
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.
      function testAllProperties()
      {
         var cond = jTAC.create("Conditions.RegExp");
         assertNotNull(cond);
         assertTrue(cond.enabled);
         assertTrue(cond.trim);
         assertNull(cond.lastEvaluateResult);
         assertFalse(cond.not);
         assertNotNull(cond.connection);
         assertTrue(cond.connection instanceof jTAC.Connections.FormElement);
         assertEquals("", cond.expression);
         assertTrue(cond.caseIns);
         assertFalse(cond.global);
         assertFalse(cond.multiline);
         assertFalse(cond.canEvaluate()); // false because expression is ""

         cond.expression = "\\d+";
         assertEquals("\\d+", cond.expression);
         assertTrue(cond.canEvaluate());

         cond.caseIns = false;
         assertFalse(cond.caseIns);
         cond.global = true;
         assertTrue(cond.global);
         cond.multiline = true;
         assertTrue(cond.multiline);
      }

      function testExpressions()
      {
         RunRegExp("\\d", false, false, false, "abc123", 1, null);   // has a digit
         RunRegExp("\\d", false, false, false, "abc", 0, null);   // has a digit
         RunRegExp("\\d", false, false, false, "", -1, null);  // blank text to compare
         RunRegExp("\\d", false, false, false, "", 0, { ignoreBlankText: false });   // blank text to compare, but return an error
         RunRegExp("[a-z]", false, false, false, "ABC", 0, null); // uppercase doesn't match
         RunRegExp("[a-z]", true, false, false, "ABC", 1, null); // uppercase allowed by caseIns


      }


      function RunRegExp(expression, caseIns, global, multiline, textToCompare, expectedResult, json)
      {
         var vInstance1 = jTAC.create("RegExp");
         assertNotNull(vInstance1);
         vInstance1.elementId = "textBox1";
         vInstance1.connection.setTextValue(textToCompare); // trick to use existing objects to write to the textbox

         vInstance1.expression = expression;
         if (caseIns != null)
            vInstance1.caseIns = caseIns;
         if (global != null)
            vInstance1.global = global;
         if (multiline != null)
         vInstance1.multiline = multiline;

         if (json != null)
            vInstance1.setProperties(json);

//         assertTrue(vInstance1.canEvaluate());
         var evalResult = vInstance1.evaluate();
         assertEquals("Eval result incorrect. Expected: " + expectedResult + " Recieved: " + evalResult, expectedResult, evalResult);

         vInstance1.connection.setTextValue(""); // reset the textbox
      }

      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testAllProperties();
         testExpressions();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>


</body>
</html>
