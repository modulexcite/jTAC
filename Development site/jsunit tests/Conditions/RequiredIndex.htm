<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/BaseElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/FormElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseOneConnection.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/RequiredIndex.js" type="text/javascript"></script>
</head>
<body>
CheckboxList: <input type="checkbox" id="CheckBox1" />
      <input type="checkbox" id="CheckBox2" />
      <input type="checkbox" id="CheckBox3" />
<br />
RadioList:<input type="radio" id="Radio1" name="RadioGroup" />
<input type="radio" id="Radio2" name="RadioGroup" />
<input type="radio" id="Radio3" name="RadioGroup" />
<input type="radio" id="Radio4" name="RadioGroup" />
<br />
      <select id="Select1">
         <option value="one">1</option>
         <option value="two">2</option>
         <option value="three">3</option>
      </select>
      <select id="MultiSelect1" multiple="multiple">
         <option value="one">1</option>
         <option value="two">2</option>
         <option value="three">3</option>
      </select>

   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.
      function testAllProperties()
      {
         var cond = jTAC.create("RequiredIndex");
         assertNotNull(cond);
         assertTrue(cond.enabled);
         assertTrue(cond.trim);
         assertNull(cond.lastEvaluateResult);
         assertFalse(cond.not);
         assertNull(cond.elementId);
         assertNotNull(cond.connection);
         assertTrue(cond.connection instanceof jTAC.Connections.FormElement);
         assertEquals(0, cond.unassignedIndex);
         assertTrue(cond.canEvaluate());

         cond.unassignedIndex = -1;
         assertEquals(-1, cond.unassignedIndex);
         assertTrue(cond.canEvaluate());

         cond.elementId = "Select1";
         assertEquals("Select1", cond.elementId);
         assertEquals("one", cond.connection.getTextValue());
         assertEquals(0, cond.connection.getTypedValue("index"));

         cond.connection.setTypedValue(2);
         assertEquals(2, cond.connection.getTypedValue("index"));
         assertEquals("three", cond.connection.getTextValue());
         cond.connection.setTypedValue(0);
         assertEquals(0, cond.connection.getTypedValue("index"));
         assertEquals("one", cond.connection.getTextValue());
         cond.connection.setTypedValue(-1);
         assertEquals(-1, cond.connection.getTypedValue("index"));
         assertEquals("", cond.connection.getTextValue());
      }

      function testSelect1()
      {
         RunRequiredListCond("Select1", -1, -1, 0, null);
         RunRequiredListCond("Select1", -1, 0, 1, null);
         RunRequiredListCond("Select1", -1, 1, 1, null);
         RunRequiredListCond("Select1", 0, 1, 1, null);
         RunRequiredListCond("Select1", 0, 0, 0, null);
         RunRequiredListCond("Select1", 1, 0, 1, null);
         RunRequiredListCond("Select1", 1, -1, 1, null);
         RunRequiredListCond("Select1", 2, 0, 1, null);
         RunRequiredListCond("Select1", 2, -1, 1, null);
         RunRequiredListCond("Select1", 2, 2, 0, null);
     }

      function testCheckBox1()
      {
         var json = { "connection": { "buttons": ["CheckBox1", "CheckBox2", "CheckBox3"]} };
         RunRequiredListCond("CheckBox1", -1, -1, 0, json);
         RunRequiredListCond("CheckBox1", -1, 0, 1, json);
         RunRequiredListCond("CheckBox1", -1, 1, 1, json);
         RunRequiredListCond("CheckBox1", 0, 1, 1, json);
         RunRequiredListCond("CheckBox1", 0, 0, 0, json);
         RunRequiredListCond("CheckBox1", 1, 0, 1, json);
         RunRequiredListCond("CheckBox1", 1, -1, 1, json);
         RunRequiredListCond("CheckBox1", 2, 0, 1, json);
         RunRequiredListCond("CheckBox1", 2, -1, 1, json);
         RunRequiredListCond("CheckBox1", 2, 2, 0, json);

         RunRequiredListCond("CheckBox1", [0, 2], 0, 0, json);
         RunRequiredListCond("CheckBox1", [0, 2], -1, 1, json);
         RunRequiredListCond("CheckBox1", [0, 2], 1, 1, json);
         RunRequiredListCond("CheckBox1", [0, 2], 2, 1, json); // succeeds because it only checks the first selected checkbox, which is 0
     }

      function testRadio1()
      {
         RunRequiredListCond("Radio1", -1, -1, 0, null);
         RunRequiredListCond("Radio1", -1, 0, 1, null);
         RunRequiredListCond("Radio1", -1, 1, 1, null);
         RunRequiredListCond("Radio1", 0, 1, 1, null);
         RunRequiredListCond("Radio1", 0, 0, 0, null);
         RunRequiredListCond("Radio1", 1, 0, 1, null);
         RunRequiredListCond("Radio1", 1, -1, 1, null);
         RunRequiredListCond("Radio1", 2, 0, 1, null);
         RunRequiredListCond("Radio1", 2, -1, 1, null);
         RunRequiredListCond("Radio1", 2, 2, 0, null);

         var json = { "connection": { "buttons": ["Radio1", "Radio2", "Radio3"]} };
         RunRequiredListCond("Radio1", -1, -1, 0, json);
         RunRequiredListCond("Radio1", -1, 0, 1, json);
         RunRequiredListCond("Radio1", -1, 1, 1, json);
         RunRequiredListCond("Radio1", 0, 1, 1, json);
         RunRequiredListCond("Radio1", 0, 0, 0, json);
         RunRequiredListCond("Radio1", 1, 0, 1, json);
         RunRequiredListCond("Radio1", 1, -1, 1, json);
         RunRequiredListCond("Radio1", 2, 0, 1, json);
         RunRequiredListCond("Radio1", 2, -1, 1, json);
         RunRequiredListCond("Radio1", 2, 2, 0, json);

     }

      function testMultiSelect1()
      {
         RunRequiredListCond("MultiSelect1", -1, -1, 0, null);
         RunRequiredListCond("MultiSelect1", -1, 0, 1, null);
         RunRequiredListCond("MultiSelect1", -1, 1, 1, null);
         RunRequiredListCond("MultiSelect1", 0, 1, 1, null);
         RunRequiredListCond("MultiSelect1", 0, 0, 0, null);
         RunRequiredListCond("MultiSelect1", 1, 0, 1, null);
         RunRequiredListCond("MultiSelect1", 1, -1, 1, null);
         RunRequiredListCond("MultiSelect1", 2, 0, 1, null);
         RunRequiredListCond("MultiSelect1", 2, -1, 1, null);
         RunRequiredListCond("MultiSelect1", 2, 2, 0, null);

         RunRequiredListCond("MultiSelect1", [0, 2], 0, 0, null);
         RunRequiredListCond("MultiSelect1", [0, 2], -1, 1, null);
         RunRequiredListCond("MultiSelect1", [0, 2], 1, 1, null);
         RunRequiredListCond("MultiSelect1", [0, 2], 2, 1, null); // fails because it only checks the first selected checkbox, which is 0
         RunRequiredListCond("MultiSelect1", [1, 2], 0, 1, null);
         RunRequiredListCond("MultiSelect1", [1, 2], -1, 1, null);
         RunRequiredListCond("MultiSelect1", [1, 2], 1, 0, null);
         RunRequiredListCond("MultiSelect1", [1, 2], 2, 1, null); // fails because it only checks the first selected checkbox, which is 0

     }

      function RunRequiredListCond(widgetId, indexToSelect, unassignedIndex, expectedResult, json)
      {
         var vInstance1 = jTAC.create("RequiredIndex");
         assertNotNull(vInstance1);
         if (json != null) // done early because it needs to set the buttons property before calling setTypedValue
            vInstance1.setProperties(json);
         vInstance1.elementId = widgetId;
         vInstance1.connection.setTypedValue(indexToSelect); // trick to use existing objects to write to the textbox

         vInstance1.unassignedIndex = unassignedIndex;


//         assertTrue(vInstance1.canEvaluate());
         var evalResult = vInstance1.evaluate();
         assertEquals("Eval result incorrect. Expected: " + expectedResult + " Recieved: " + evalResult, expectedResult, evalResult);

         vInstance1.connection.setTypedValue(-1); // reset to nothing selected
      }


      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testAllProperties();
         testSelect1();
         testCheckBox1();
         testRadio1();
         testMultiSelect1();
         
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>


</body>
</html>
