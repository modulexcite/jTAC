<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script src="../../jsunit/jsUnitCore.js" type="text/javascript"></script>
   <script src="../../jsunit tests/Shared.js" type="text/javascript"></script>
   <script src="../../jquery-globalize/globalize.js" type="text/javascript"></script>
   <script src="../../jTAC/jTAC.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseCulture.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseNumber.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseFloat.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseDatesAndTimes.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseDate.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/BaseTime.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/TimeOfDay.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Date.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Duration.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Float.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Integer.js" type="text/javascript"></script>
   <script src="../../jTAC/TypeManagers/Boolean.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/BaseElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/FormElement.js" type="text/javascript"></script>
   <script src="../../jTAC/Connections/Value.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/Base.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseOneConnection.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseTwoConnections.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/BaseOperator.js" type="text/javascript"></script>
   <script src="../../jTAC/Conditions/CompareToValue.js" type="text/javascript"></script>
</head>
<body>
   <form action="CompareToValueCondition.htm" method="post" >
      <input id="textBox1" type="text" />
      <input id="checkBox1" type="checkbox" value="abc" />
      <input type="submit" value="Submit" />
   </form>
   <script type="text/javascript">
      // Scripts require jsUnit. All functions that start with "test" are considered test cases. These functions cannot have any parameters.
      function testAllProperties()
      {
         var cond = jTAC.create("Conditions.CompareToValue");
         assertNotNull(cond);
         assertNotNull(cond.typeManager); // while not assigned before, it uses the default of TypeManagers.Integer
         assertTrue(cond.typeManager instanceof jTAC.TypeManagers.Integer);
         assertTrue(cond.enabled);
         assertTrue(cond.trim);
         assertNull(cond.lastEvaluateResult);
         assertFalse(cond.not);
         assertNotNull(cond.connection);
         assertTrue(cond.connection instanceof jTAC.Connections.FormElement);
         assertNull(cond.valueToCompare);
         assertEquals("=", cond.operator);
         assertFalse(cond.canEvaluate()); // false because valueToCompare is null

         cond.valueToCompare = 10;
         assertEquals(10, cond.valueToCompare);
         assertTrue(cond.canEvaluate());

         cond.operator = "<>";
         assertEquals("<>", cond.operator);


         cond.typeManager = jTAC.create("Float");
         assertTrue(cond.typeManager instanceof jTAC.TypeManagers.Float);

         cond.enabled = false;
         assertFalse(cond.enabled);
         assertFalse(cond.canEvaluate());

         assertTrue(cond.connection.trim);
         cond.trim = false;
         assertFalse(cond.trim);
         assertFalse(cond.connection.trim);

         cond.not = true;
         assertTrue(cond.not);
         cond.connection2 = jTAC.create("Connections.Value", {value: 100.0, supportedTypeName: "float"});
         assertNotNull(cond.connection2);
         assertTrue(cond.connection2 instanceof jTAC.Connections.Value);
         assertEquals(100.0, cond.connection2.value);
         assertEquals("float", cond.connection2.supportedTypeName);

      }

      function testInteger()
      {
         var tm = jTAC.create("Integer");
         RunValueToCompare(tm, "1", 0, ">", 1);
         RunValueToCompare(tm, "1", 0, "<", 0);
         RunValueToCompare(tm, "1", 0, ">=", 1);
         RunValueToCompare(tm, "1", 0, "<=", 0);
         RunValueToCompare(tm, "1", 0, "<>", 1);
         RunValueToCompare(tm, "1", 0, "=", 0);

         RunValueToCompare(tm, "1", 1, ">", 0);
         RunValueToCompare(tm, "1", 1, "<", 0);
         RunValueToCompare(tm, "1", 1, ">=", 1);
         RunValueToCompare(tm, "1", 1, "<=", 1);
         RunValueToCompare(tm, "1", 1, "<>", 0);
         RunValueToCompare(tm, "1", 1, "=", 1);

         RunValueToCompare(tm, "1", 2, ">", 0);
         RunValueToCompare(tm, "1", 2, "<", 1);
         RunValueToCompare(tm, "1", 2, ">=", 0);
         RunValueToCompare(tm, "1", 2, "<=", 1);
         RunValueToCompare(tm, "1", 2, "<>", 1);
         RunValueToCompare(tm, "1", 2, "=", 0);

         RunValueToCompare(tm, "1", 1, "=", 0, { "not": true });
         RunValueToCompare(tm, "1", 1, "<>", 1, { "not": true });


         RunValueToCompare(tm, "", 1, "=", -1);
         RunValueToCompare(tm, "", 1, "=", -1, { "not" : true }); // not should not change the result of -1

      }

      function testFloat()
      {
         var tm = jTAC.create("Float");
         RunValueToCompare(tm, "1.0", 0, ">", 1);
         RunValueToCompare(tm, "1.0", 0, "<", 0);
         RunValueToCompare(tm, "1.0", 0, ">=", 1);
         RunValueToCompare(tm, "1.0", 0, "<=", 0);
         RunValueToCompare(tm, "1.0", 0, "<>", 1);
         RunValueToCompare(tm, "1.0", 0, "=", 0);

         RunValueToCompare(tm, "1.5", 1.5, "<", 0);
         RunValueToCompare(tm, "1.5", 1.5, ">", 0);
         RunValueToCompare(tm, "1.5", 1.5, ">=", 1);
         RunValueToCompare(tm, "1.5", 1.5, "<=", 1);
         RunValueToCompare(tm, "1.5", 1.5, "<>", 0);
         RunValueToCompare(tm, "1.5", 1.5, "=", 1);

         RunValueToCompare(tm, "1.5", 1.6, ">", 0);
         RunValueToCompare(tm, "1.5", 1.6, "<", 1);
         RunValueToCompare(tm, "1.5", 1.6, ">=", 0);
         RunValueToCompare(tm, "1.5", 1.6, "<=", 1);
         RunValueToCompare(tm, "1.5", 1.6, "<>", 1);
         RunValueToCompare(tm, "1.5", 1.6, "=", 0);

         RunValueToCompare(tm, "1.2", 1.2, "=", 0, { "not": true });
         RunValueToCompare(tm, "1.2", 1.2, "<>", 1, { "not": true });


         RunValueToCompare(tm, "", 1.2, "=", -1);
         RunValueToCompare(tm, "", 1.2, "=", -1, { "not" : true }); // not should not change the result of -1

      }

      function testDate()
      {
         var tm = jTAC.create("Date");
         var valueToCompare = new Date(2012, 0, 1);   //jan 1
         RunValueToCompare(tm, "1/20/2012", valueToCompare, ">", 1);
         RunValueToCompare(tm, "1/20/2012", valueToCompare, ">=", 1);
         RunValueToCompare(tm, "1/20/2012", valueToCompare, "<", 0);
         RunValueToCompare(tm, "1/20/2012", valueToCompare, "<=", 0);
         RunValueToCompare(tm, "1/20/2012", valueToCompare, "=", 0);
         RunValueToCompare(tm, "1/20/2012", valueToCompare, "<>", 1);

         RunValueToCompare(tm, "1/1/2012", valueToCompare, "=", 1);

         RunValueToCompare(tm, "1/20/2012", valueToCompare, "=", 1, { "not" : true });

      }

      function testTimeOfDay()
      {
         var tm = jTAC.create("TimeOfDay");
         var valueToCompare = new Date(2012, 0, 1, 1, 0, 0);   //jan 1, 1 AM
         RunValueToCompare(tm, "1:30:00 AM", valueToCompare, ">", 1);
         RunValueToCompare(tm, "1:30:00 AM", valueToCompare, ">=", 1);
         RunValueToCompare(tm, "1:30:00 AM", valueToCompare, "<", 0);
         RunValueToCompare(tm, "1:30:00 AM", valueToCompare, "<=", 0);
         RunValueToCompare(tm, "1:30:00 AM", valueToCompare, "=", 0);
         RunValueToCompare(tm, "1:30:00 AM", valueToCompare, "<>", 1);

         RunValueToCompare(tm, "1:00:00 AM", valueToCompare, "=", 1);
      }

      function testDuration()
      {
         var tm = jTAC.create("Duration.InSeconds");   // valueAsNumber representing seconds
         var valueToCompare = 5 * 3600;
         RunValueToCompare(tm, "4:30:00", valueToCompare, "<", 1);
         RunValueToCompare(tm, "4:30:00", valueToCompare, "<=", 1);
         RunValueToCompare(tm, "4:30:00", valueToCompare, ">", 0);
         RunValueToCompare(tm, "4:30:00", valueToCompare, ">=", 0);
         RunValueToCompare(tm, "4:30:00", valueToCompare, "=", 0);
         RunValueToCompare(tm, "4:30:00", valueToCompare, "<>", 1);

         RunValueToCompare(tm, "5:0:00", valueToCompare, "=", 1);
      }

      function testBoolean()
      {
         var tm = jTAC.create("Boolean");
         RunValueToCompare(tm, "true", "true", "=", 1);
         RunValueToCompare(tm, "true", false, "=", 0);
         RunValueToCompare(tm, "false", "true", "<>", 1);
         RunValueToCompare(tm, "false", "false", "=", 1);
         RunValueToCompare(tm, "false", true, "<", 1);
         RunValueToCompare(tm, "true", true, "=", 1);
         RunValueToCompare(tm, "true", false, "=", 0);

         RunCheckedToCompare(tm, true, "true", "=", 1);
         RunCheckedToCompare(tm, true, false, "=", 0);
         RunCheckedToCompare(tm, false, "true", "<>", 1);
         RunCheckedToCompare(tm, false, "false", "=", 1);
         RunCheckedToCompare(tm, false, true, "<", 1);
         RunCheckedToCompare(tm, true, true, "=", 1);
         RunCheckedToCompare(tm, true, false, "=", 0);
      }


      function RunValueToCompare(typeManager, textToCompare, valueToCompare, operator, expectedResult, json)
      {
         var vInstance1 = jTAC.create("CompareToValue");
         assertNotNull(vInstance1);
         vInstance1.typeManager = typeManager;
         vInstance1.elementId = "textBox1";
         vInstance1.connection.setTextValue(textToCompare); // trick to use existing objects to write to the textbox

         vInstance1.valueToCompare = valueToCompare;
         vInstance1.operator = operator;

         if (json != null)
            vInstance1.setProperties(json);

//         assertTrue(vInstance1.canEvaluate());
         var evalResult = vInstance1.evaluate();
         assertEquals("Eval result incorrect. Expected: " + expectedResult + " Recieved: " + evalResult, expectedResult, evalResult);

         vInstance1.connection.setTextValue(""); // reset the textbox
      }
      function RunCheckedToCompare(typeManager, checked, valueToCompare, operator, expectedResult, json)
      {
         var vInstance1 = jTAC.create("CompareToValue");
         assertNotNull(vInstance1);
         vInstance1.typeManager = typeManager;
         vInstance1.elementId = "checkBox1";
         vInstance1.connection.setTypedValue(checked); // trick to use existing objects to write to the checkbox

         vInstance1.valueToCompare = valueToCompare;
         vInstance1.operator = operator;

         if (json != null)
            vInstance1.setProperties(json);

//         assertTrue(vInstance1.canEvaluate());
         var evalResult = vInstance1.evaluate();
         assertEquals("Eval result incorrect. Expected: " + expectedResult + " Recieved: " + evalResult, expectedResult, evalResult);

         vInstance1.connection.setTypedValue(false); // reset the checkbox
      }

      if (!document.referrer) // for running within a debugger, but not within the jsunit TestRunner.
      try
      {
         testAllProperties();
         testInteger();
         testFloat();
         testDate();
         testTimeOfDay();
         testDuration();
         testBoolean();
      }
      catch (e)
      {
         window.alert(e instanceof JsUnit.Failure ? e.comment + "  " + e.jsUnitMessage : e.message);
      }

   </script>


</body>
</html>
