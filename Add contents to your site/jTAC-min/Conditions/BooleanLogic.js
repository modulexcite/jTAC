jTAC._internal.temp._Conditions_BooleanLogic={extend:"Conditions.Base",constructor:function(a){this.callParent([a])},config:{operator:"OR",conditions:[]},configrules:{operator:["OR","AND"]},canEvaluate:function(){if(!this.getConditions().length){return false}return this.callParent()},_evaluateRule:function(){var f;this._cleanupConditions();var b=this.getConditions();var e=this.getOperator()=="AND";for(var a=0;a<b.length;a++){var c=b[a];if(c.canEvaluate()){var d=c.evaluate();if(d!=-1){f=true;if(d){if(!e){return 1}}else{if(e){return 0}}}}}if(!f){return -1}return e?1:0},_cleanupConditions:function(){try{this._pushContext();var b=this.getConditions();for(var a=0;a<b.length;a++){var c=b[a];if(!(c instanceof jTAC.Conditions.Base)&&(typeof(c)=="object")){if(!c.jtacClass){this._error("Must define the Condition's class in the 'jtacClass' property of the object that describes a condition.")}c=jTAC.create(null,c);b[a]=c}else{if(!(c instanceof jTAC.Conditions.Base)){this._error("The conditions property must only contain Condition objects and JSon objects that generate Condition objects.")}}}}finally{this._popContext()}},collectConnections:function(c){this.callParent([c]);this._cleanupConditions();var b=this.getConditions();if(b){for(var a=0;a<b.length;a++){b[a].collectConnections(c)}}}};jTAC.define("Conditions.BooleanLogic",jTAC._internal.temp._Conditions_BooleanLogic);jTAC.defineAlias("BooleanLogic","Conditions.BooleanLogic");